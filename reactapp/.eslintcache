[{"/Users/sj/Documents/Programming/clusters/reactapp/src/index.js":"1","/Users/sj/Documents/Programming/clusters/reactapp/src/reportWebVitals.js":"2","/Users/sj/Documents/Programming/clusters/reactapp/src/App.js":"3","/Users/sj/Documents/Programming/clusters/reactapp/src/contexts/AuthContext.js":"4","/Users/sj/Documents/Programming/clusters/reactapp/src/routes/PublicRoute.js":"5","/Users/sj/Documents/Programming/clusters/reactapp/src/routes/PrivateRoute.js":"6","/Users/sj/Documents/Programming/clusters/reactapp/src/routes/ActivePrivateRoute.js":"7","/Users/sj/Documents/Programming/clusters/reactapp/src/firebase.js":"8","/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/LoginPage.js":"9","/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/HomePage.js":"10","/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/RegistrationPage.js":"11","/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/AccountPage.js":"12","/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/Dashboard.js":"13","/Users/sj/Documents/Programming/clusters/reactapp/src/components/panels/ChatPanel.js":"14","/Users/sj/Documents/Programming/clusters/reactapp/src/components/forms/LoginForm.js":"15","/Users/sj/Documents/Programming/clusters/reactapp/src/components/forms/UpdateForm.js":"16","/Users/sj/Documents/Programming/clusters/reactapp/src/components/modules/NavBar.js":"17","/Users/sj/Documents/Programming/clusters/reactapp/src/components/forms/RegistrationForm.js":"18","/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/sub-pages/ActiveDashboard.js":"19","/Users/sj/Documents/Programming/clusters/reactapp/src/components/forms/AccountForm.js":"20","/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/sub-pages/DormantDashboard.js":"21","/Users/sj/Documents/Programming/clusters/reactapp/src/components/panels/ApplicantPanel.js":"22","/Users/sj/Documents/Programming/clusters/reactapp/src/components/panels/BusinessPanel.js":"23"},{"size":507,"mtime":1611512318534,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1611449052000,"results":"26","hashOfConfig":"25"},{"size":1331,"mtime":1611512302027,"results":"27","hashOfConfig":"25"},{"size":5734,"mtime":1611449052000,"results":"28","hashOfConfig":"25"},{"size":368,"mtime":1611449052000,"results":"29","hashOfConfig":"25"},{"size":364,"mtime":1611449052000,"results":"30","hashOfConfig":"25"},{"size":640,"mtime":1611449052000,"results":"31","hashOfConfig":"25"},{"size":515,"mtime":1611449052000,"results":"32","hashOfConfig":"25"},{"size":244,"mtime":1610975896225,"results":"33","hashOfConfig":"25"},{"size":459,"mtime":1610999449346,"results":"34","hashOfConfig":"25"},{"size":273,"mtime":1610975898810,"results":"35","hashOfConfig":"25"},{"size":252,"mtime":1610975879605,"results":"36","hashOfConfig":"25"},{"size":1681,"mtime":1610975889459,"results":"37","hashOfConfig":"25"},{"size":2790,"mtime":1610919112000,"results":"38","hashOfConfig":"25"},{"size":2698,"mtime":1610975422196,"results":"39","hashOfConfig":"25"},{"size":4129,"mtime":1610999145542,"results":"40","hashOfConfig":"25"},{"size":914,"mtime":1610995231497,"results":"41","hashOfConfig":"25"},{"size":4733,"mtime":1611002852064,"results":"42","hashOfConfig":"25"},{"size":1441,"mtime":1610919112000,"results":"43","hashOfConfig":"25"},{"size":3853,"mtime":1610999095384,"results":"44","hashOfConfig":"25"},{"size":1120,"mtime":1610919112000,"results":"45","hashOfConfig":"25"},{"size":9121,"mtime":1610919112000,"results":"46","hashOfConfig":"25"},{"size":9000,"mtime":1610919112000,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"pj9xrk",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"50"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"108"},"/Users/sj/Documents/Programming/clusters/reactapp/src/index.js",[],["109","110"],"/Users/sj/Documents/Programming/clusters/reactapp/src/reportWebVitals.js",[],"/Users/sj/Documents/Programming/clusters/reactapp/src/App.js",[],"/Users/sj/Documents/Programming/clusters/reactapp/src/contexts/AuthContext.js",["111","112","113"],"import React, {useContext, useState, useEffect} from 'react';\nimport {auth} from '../firebase';\nimport firebase from 'firebase/app';\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n    return useContext(AuthContext);\n}\n\nexport function AuthProvider({children}) {\n\n    const [currentUser, setCurrentUser] = useState(JSON.parse(sessionStorage.getItem('currentUser')) || null);\n    const [userData, setUserData] = useState(JSON.parse(sessionStorage.getItem('userData')) || null);\n    const [loading, setLoading] = useState(true);\n\n\n    async function registerUser(name, email, password, type, worldId) {\n        const fire = auth.createUserWithEmailAndPassword(email, password);\n        const destination = type === 'applicant' ? `${process.env.REACT_APP_BACKEND_URL}/worlds/${worldId}/applicants`\n            : `${process.env.REACT_APP_BACKEND_URL}/worlds/${worldId}/businesses`;\n        const data = await fetch(destination, {\n            method: 'POST',\n            body: JSON.stringify({\n                name,\n                email,\n                worldId\n            })\n        }).then(response => {\n            if(response.ok){\n                return response.json();\n            }\n        });\n        setUserData(data);\n        return fire;\n    }\n\n    async function loginUser(email, password){\n        const fire = auth.signInWithEmailAndPassword(email, password);\n        const data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/users?email=${email}`).then(response => {\n            if(response.ok){\n                return response.json();\n            }\n        });\n        setUserData(data[0]);\n        return fire;\n    }\n\n    async function updateAccount(name, email, password, worldId){\n        currentUser.updateEmail(email);\n        password && currentUser.updatePassword(password);\n        const data = await fetch(`${process.env.REACT_APP_BACKEND_URL}${userData.links.self}`, {\n            method: 'PUT',\n            body: JSON.stringify({\n                action: 'account',\n                name,\n                email,\n                worldId\n            })\n        }).then(response => {\n            if(response.ok){\n                return response.json();\n            }\n        });\n        setUserData(data);\n    }\n\n    async function updateFeatures(cap, gpa, majors, standings, skills, interests, courses){\n        const data = await fetch(`${process.env.REACT_APP_BACKEND_URL}${userData.links.self}`, {\n            method: 'PUT',\n            body: JSON.stringify({\n                action: 'features',\n                cap: parseInt(cap),\n                gpa: parseFloat(gpa),\n                majors,\n                standings,\n                skills,\n                interests,\n                courses\n            })\n        }).then(response => {\n            if(response.ok){\n                return response.json();\n            }\n        });\n        setUserData(data);\n    }\n\n    async function logoutUser(){\n        const fire = auth.signOut();\n        setUserData(null);\n        return fire;\n    }\n\n    async function deleteUser(){\n        const data = await fetch(`${process.env.REACT_APP_BACKEND_URL}${userData.links.self}`, {\n            method: 'DELETE'\n        }).then(response => {\n            if(response.ok){\n                return response.json();\n            }\n        });\n        const fire = currentUser.delete();\n        setUserData(null);\n        return fire;\n    }\n\n    async function joinCluster(){\n        const data = await fetch(`${process.env.REACT_APP_BACKEND_URL}${userData.links.self}`, {\n            method: 'POST',\n            body: JSON.stringify({action: 'join'})\n        }).then(response => {\n            if(response.ok){\n                return response.json();\n            }\n        });\n        setUserData(data);\n    }\n\n    async function leaveCluster(){\n        const data = await fetch(`${process.env.REACT_APP_BACKEND_URL}${userData.links.self}`, {\n            method: 'POST',\n            body: JSON.stringify({action: 'leave'})\n        }).then(response => {\n            if(response.ok){\n                return response.json();\n            }\n        });\n        setUserData(data);\n    }\n\n    async function peelFromCluster(){\n        const data = await fetch(`${process.env.REACT_APP_BACKEND_URL}${userData.links.self}`, {\n            method: 'POST',\n            body: JSON.stringify({action: 'peel'})\n        }).then(response => {\n            if(response.ok){\n                return response.json();\n            }\n        });\n        setUserData(data);\n    }\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(async user => {\n            if(!user){\n                sessionStorage.clear();\n            } else if(!userData){\n                const data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/users?email=${user.email}`).then(response => {\n                    if(response.ok){\n                        return response.json();\n                    }\n                });\n                setUserData(data[0]);\n                sessionStorage.setItem('currentUser', JSON.stringify(user));\n            }\n            setCurrentUser(user);\n        });\n        setLoading(false)\n        return unsubscribe;\n    }, []);\n\n    useEffect(() => {\n        sessionStorage.setItem('userData', JSON.stringify(userData))\n    }, [userData]);\n\n    const value = {\n        currentUser,\n        userData,\n        registerUser,\n        loginUser,\n        logoutUser,\n        deleteUser,\n        updateAccount,\n        updateFeatures,\n        joinCluster,\n        peelFromCluster,\n        leaveCluster,\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {!loading && children}\n        </AuthContext.Provider>\n    );\n}","/Users/sj/Documents/Programming/clusters/reactapp/src/routes/PublicRoute.js",["114"],"import React, {useEffect} from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport {useAuth} from '../contexts/AuthContext';\n\nexport function PublicRoute({component: Component, ...rest}){\n    const {userData} = useAuth();\n\n    return (\n        <Route {...rest} render={props => !userData ? <Component {...props}/> : <Redirect to='/dashboard'/>}/>\n    )\n}","/Users/sj/Documents/Programming/clusters/reactapp/src/routes/PrivateRoute.js",["115"],"import React, {useEffect} from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport {useAuth} from '../contexts/AuthContext';\n\nexport function PrivateRoute({component: Component, ...rest}){\n    const {userData} = useAuth();\n\n    return (\n        <Route {...rest} render={props => userData ? <Component {...props}/> : <Redirect to='/login'/>}/>\n    )\n}","/Users/sj/Documents/Programming/clusters/reactapp/src/routes/ActivePrivateRoute.js",[],"/Users/sj/Documents/Programming/clusters/reactapp/src/firebase.js",[],"/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/LoginPage.js",[],"/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/HomePage.js",[],"/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/RegistrationPage.js",[],"/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/AccountPage.js",[],"/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/Dashboard.js",["116","117"],"import React, {useState, useEffect} from 'react';\nimport {useAuth} from '../../contexts/AuthContext';\nimport {UpdateForm} from '../forms/UpdateForm';\nimport {ActiveDashboard} from './sub-pages/ActiveDashboard';\nimport {DormantDashboard} from './sub-pages/DormantDashboard';\nimport {useHistory} from 'react-router-dom';\nimport {NavBar} from '../modules/NavBar';\n\nexport function Dashboard(){\n\n    const {userData, logoutUser, deleteUser} = useAuth();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const history = useHistory();\n\n\n    async function handleLogoutUser(){\n        try {\n            setError('Logged Out');\n            setLoading(true);\n            await logoutUser();\n            history.push('/');\n        } catch {\n            setError('Failed to log out');\n        }\n        setLoading(false);\n        console.log(error);\n    }\n\n    async function handleDeleteUser(){\n        try {\n            setError('Successfully deleted');\n            setLoading(true);\n            await deleteUser();\n            history.push('/');\n        } catch(err) {\n            setError(err);\n        }\n        setLoading(false);\n        console.log(error);\n    }\n\n\n    return (\n        <div>\n            <NavBar />\n            {userData &&\n                <div>\n                    {!userData.clusterId && <DormantDashboard />}\n                    {userData.clusterId && <ActiveDashboard />}\n                    <button disabled={loading} onClick={handleLogoutUser}>Logout</button>\n                    <button disabled={loading} onClick={handleDeleteUser}>Delete User</button>\n                </div>\n            }\n        </div>\n    );\n}","/Users/sj/Documents/Programming/clusters/reactapp/src/components/panels/ChatPanel.js",["118","119"],"import React, {useState, useEffect} from 'react';\nimport {useAuth} from '../../contexts/AuthContext';\nimport io from 'socket.io-client';\n\nconst socket = io.connect('http://127.0.0.1:5000/messaging');\n\nexport function ChatPanel(){\n\n    const {userData} = useAuth();\n    const [chatsList, setChatsList] = useState([]);\n    const [chat, setChat] = useState({});\n    const [messages, setMessages] = useState([]);\n    const [message, setMessage] = useState('');\n    const [error, setError] = useState('');\n\n    socket.on('newMessage', message => setMessages([...messages, message]));\n    socket.on('message', message => setMessages([...messages, message]));\n\n    useEffect(async () => {\n        try {\n            const data = await fetch(userData.links.chats).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            socket.emit('join', {userId: userData.id})\n            setChatsList(data);\n            setChat(data[0] || {});\n        } catch(err) {\n            setError('Failed to grab all chats')\n        }\n    }, [userData]);\n\n    async function handleChatClick(chat){\n        try {\n            const data = await fetch(chat.links.messages).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setChat(chat);\n            setMessages(data);\n        } catch(err) {\n            setError('Failed to display chat');\n        }\n    }\n\n    function handleSendMessage(){\n        socket.emit('message', {senderId: chat.senderId, recipientId: chat.recipientId,\n            chatId: chat.id, message});\n        setMessage('');\n    }\n\n    function renderChatsList(){\n        return chatsList.map(chat => {\n            return (\n                <div>\n                    <h3>{chat.recipientName}</h3>\n                    <button onClick={() => handleChatClick(chat)}>Select</button>\n                </div>\n            );\n        });\n    }\n\n    function renderSpecificChat(){\n        return (\n            <div>\n                <h2>{chat.recipientName}</h2>\n                <div>\n                    {messages.map(message => {\n                        return (\n                            <div>\n                                <br/>\n                                {message.message}\n                            </div>\n                        );\n                    })}\n                </div>\n                <br/>\n                <input value={message} onChange={e => setMessage(e.target.value)}/>\n                <button onClick={handleSendMessage}>Send</button>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            {renderChatsList()}\n            <br/>\n            {renderSpecificChat()}\n        </div>\n    )\n\n}","/Users/sj/Documents/Programming/clusters/reactapp/src/components/forms/LoginForm.js",["120","121","122","123"],"import React, {useState, useEffect} from 'react';\nimport {useAuth} from '../../contexts/AuthContext';\nimport {Link, useHistory} from 'react-router-dom';\nimport {\n    Form,\n    Button\n} from 'react-bootstrap';\nimport '../../styles/Form.css';\n\nexport function LoginForm() {\n\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const {loginUser, userData} = useAuth();\n    const history = useHistory();\n\n     async function handleLoginUser() {\n        try {\n            setError('Logged In');\n            setLoading(true);\n            if(!email || !password){\n                throw 'Fields are required';\n            }\n            await loginUser(email, password);\n            history.push('/dashboard');\n        } catch(err) {\n            setError(err);\n        }\n        console.log(error);\n        setLoading(false);\n    };\n\n\n    return (\n\n        <div>\n\n            <div className=\"form-container\">\n\n                <h1 className=\"form-header\">Log In</h1>\n\n                <Form>\n\n                    <Form.Group controlId=\"email\">\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"Enter email\" \n                        value={email} onChange={e => setEmail(e.target.value)} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"password\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Enter password\" \n                        value={password} onChange={e => setPassword(e.target.value)} />\n                    </Form.Group>\n                    \n                    <div className=\"form-button\">\n                        <Button variant=\"primary\" onClick={handleLoginUser} block>\n                            Sign in\n                        </Button>\n                    </div>\n\n                </Form>\n\n\n                <div className=\"form-register-redirect\">\n                        <span><p>Need an Account? <Link to='/register'>Register</Link></p></span>\n                </div>\n\n            </div>\n\n        </div>\n\n\n        // *** No Styling ***\n        // <div>\n        //     <input value={email} onChange={e => setEmail(e.target.value)}/>\n        //     <br/>\n        //     <input type='password' value={password} onChange={e => setPassword(e.target.value)}/>\n        //     <button onClick={handleLoginUser}>Submit</button>\n        //     <div>\n        //         Need an Account? <Link to='/register'>Register</Link>\n        //     </div>\n        // </div>\n    )\n}","/Users/sj/Documents/Programming/clusters/reactapp/src/components/forms/UpdateForm.js",["124","125","126"],"import React, {useState, useEffect} from 'react';\nimport {useAuth} from '../../contexts/AuthContext';\nimport bcrypt from 'bcryptjs';\nimport TagsInput from 'react-tagsinput';\nimport '../../styles/TagsInput.css';\nimport '../../styles/Form.css';\nimport {\n    Form,\n    Button\n} from 'react-bootstrap';\n\nexport function UpdateForm() {\n\n    const {userData, updateFeatures} = useAuth();\n    const [cap, setCap] = useState(userData.cap);\n    const [gpa, setGpa] = useState(userData.features.gpa);\n    const [majors, setMajors] = useState(userData.features.majors);\n    const [standings, setStandings] = useState(userData.features.standings);\n    const [skills, setSkills] = useState(userData.features.skills);\n    const [interests, setInterests] = useState(userData.features.interests)\n    const [courses, setCourses] = useState(userData.features.courses)\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        console.log(userData);\n    }, [])\n\n    async function handleUpdateFeatures() {\n        try {\n            setError('Updated Features');\n            setLoading(true);\n            if(!cap || !gpa || !majors.length || !standings.length || !skills.length || !interests.length || !courses.length) {\n               throw 'Fields not filled out';\n            }\n            await updateFeatures(cap, gpa, majors, standings, skills, interests, courses);\n        } catch(err) {\n            setError(err);\n        }\n        console.log(error);\n        setLoading(false);\n    }\n\n    return (\n\n        <div>\n        \n            <div className=\"register-container\">\n\n                <h2 className=\"register-header\">Set User Details</h2>\n\n                <Form>\n                    <Form.Group controlId=\"cap\">\n                        <Form.Label>Cap</Form.Label>\n                        <Form.Control type=\"number\" step=\"1\" min=\"1\" placeholder=\"Enter cap\" \n                        value={cap} onChange={e => setCap(e.target.value)} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"gpa\">\n                        <Form.Label>GPA</Form.Label>\n                        <Form.Control type=\"number\" step=\"0.01\" min=\"0.00\" placeholder=\"Enter GPA out of 4.0\" \n                        value={gpa} onChange={e => setGpa(e.target.value)} />\n                    </Form.Group>\n\n                    Major(s)<TagsInput value={majors} onChange={tags => setMajors(tags)}/>\n                    <br/>\n                    Standing(s)<TagsInput value={standings} onChange={tags => setStandings(tags)}/>\n                    <br/>\n                    Skills<TagsInput value={skills} onChange={tags => setSkills(tags)}/>\n                    <br/>\n                    Interests<TagsInput value={interests} onChange={tags => setInterests(tags)}/>\n                    <br/>\n                    Courses<TagsInput value={courses} onChange={tags => setCourses(tags)}/>\n                    <br/>\n\n                    <div className=\"register-button\">\n                        <Button variant=\"primary\" disabled={loading} onClick={handleUpdateFeatures} block>Set User Info</Button>\n                    </div>\n\n                </Form>\n\n            </div>\n\n        </div>\n\n        // *** No Styling ***\n        // <div>\n        //     Cap: <input value={cap} onChange={e => setCap(e.target.value)}/>\n        //     <br/>\n        //     GPA: <input value={gpa} onChange={e => setGpa(e.target.value)}/>\n        //     <br/>\n        //     Major: <TagsInput value={majors} onChange={tags => setMajors(tags)}/>\n        //     <br/>\n        //     Standing: <TagsInput value={standings} onChange={tags => setStandings(tags)}/>\n        //     <br/>\n        //     Skills: <TagsInput value={skills} onChange={tags => setSkills(tags)}/>\n        //     <br/>\n        //     Interests: <TagsInput value={interests} onChange={tags => setInterests(tags)}/>\n        //     <br/>\n        //     Courses: <TagsInput value={courses} onChange={tags => setCourses(tags)}/>\n        //     <br/>\n        //     <button onClick={handleUpdateFeatures}>Submit</button>\n        // </div>\n    )\n}","/Users/sj/Documents/Programming/clusters/reactapp/src/components/modules/NavBar.js",[],"/Users/sj/Documents/Programming/clusters/reactapp/src/components/forms/RegistrationForm.js",["127","128","129","130"],"import React, {useState, useEffect} from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport TagsInput from 'react-tagsinput';\nimport {useAuth} from '../../contexts/AuthContext';\nimport {\n    Form,\n    Button\n} from 'react-bootstrap';\nimport '../../styles/Form.css';\n\n\nexport function RegistrationForm() {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [type, setType] = useState('');\n    const [worldId, setWorldId] = useState('');\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const {registerUser} = useAuth();\n    const history = useHistory();\n\n\n    async function handleRegisterUser() {\n        try {\n            setError('Registered');\n            setLoading(true);\n            if(!name || !email || !password || !confirmPassword || !type || !worldId) {\n               throw 'Fields not filled out';\n            } else if(password !== confirmPassword){\n                throw 'Passwords do not match';\n            }\n            await registerUser(name, email, password, type, worldId);\n            history.push('/dashboard');\n        } catch(err) {\n            setError(err);\n        }\n        console.log(error);\n        setLoading(false);\n    }\n\n    return (\n\n        <div className=\"register-container\">\n\n            <h1 className=\"register-header\">Create Account</h1>\n\n            <Form>\n\n                <div className=\"radio-container\">\n                    <input type='radio' name='type' onClick={() => setType('applicant')}/> Student {' '}\n                    <input type='radio' name='type' onClick={() => setType('business')}/> Faculty\n                </div>\n\n                <Form.Group controlId=\"name\">\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control placeholder=\"Enter name\" \n                    value={name} onChange={e => setName(e.target.value)} />\n                </Form.Group>\n\n                <Form.Group controlId=\"worldId\">\n                    <Form.Label>College</Form.Label>\n                    <Form.Control placeholder=\"Enter college\" \n                    value={worldId} onChange={e => setWorldId(e.target.value)} />\n                </Form.Group>\n\n                <Form.Group controlId=\"email\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"Enter email\" \n                    value={email} onChange={e => setEmail(e.target.value)} />\n                </Form.Group>\n\n                <Form.Group controlId=\"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"Enter password\" \n                    value={password} onChange={e => setPassword(e.target.value)} />\n                </Form.Group>\n\n                <Form.Group controlId=\"confirmPassword\">\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"Confirm password\" \n                    value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} />\n                </Form.Group>\n\n                <div className=\"register-button\">\n                    <Button variant=\"primary\" disabled={loading} onClick={handleRegisterUser} block>Sign up</Button>\n                </div>\n\n            </Form>\n            \n            <div className=\"form-register-redirect\">\n                Already Have an Account? <Link to='/login'>Sign in</Link>\n            </div>\n\n        </div>\n\n        // <div>\n        //     Type:\n        //     <input type='radio' name='type' onClick={() => setType('applicant')}/> Applicant\n        //     <input type='radio' name='type' onClick={() => setType('business')}/> Business\n        //     <br/>\n        //     College: <input value={worldId} onChange={e => setWorldId(e.target.value)}/>\n        //     <br/>\n        //     Name: <input value={name} onChange={e => setName(e.target.value)}/>\n        //     <br/>\n        //     Email: <input value={email} onChange={e => setEmail(e.target.value)}/>\n        //     <br/>\n        //     Password: <input type='password' value={password} onChange={e => setPassword(e.target.value)}/>\n        //     <br/>\n        //     Confirm Password: <input type='password' value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)}/>\n        //     <br/>\n        //     <button disabled={loading} onClick={handleRegisterUser}>Submit</button>\n        //     <div>\n        //         Already Have an Account? <Link to='/login'>Log In</Link>\n        //     </div>\n        // </div>\n    )\n}","/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/sub-pages/ActiveDashboard.js",["131","132"],"import React, {useState, useEffect} from 'react';\nimport {useAuth} from '../../../contexts/AuthContext';\nimport {ApplicantPanel} from '../../panels/ApplicantPanel';\nimport {BusinessPanel} from '../../panels/BusinessPanel';\nimport {useHistory} from 'react-router-dom';\n\nexport function ActiveDashboard(){\n\n    const {userData, peelFromCluster, leaveCluster} = useAuth();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const history = useHistory();\n\n\n    async function handlePeelFromCluster(){\n        try {\n            setError('Peeled From Cluster');\n            setLoading(true);\n            await peelFromCluster();\n        } catch(err) {\n            setError(err);\n        }\n        setLoading(false);\n        console.log(error);\n    }\n\n    async function handleLeaveCluster(){\n        try {\n            setError('Left Cluster');\n            setLoading(true);\n            await leaveCluster();\n        } catch(err) {\n            setError(err);\n        }\n        setLoading(false);\n        console.log(error);\n    }\n\n\n    return (\n        <div>\n            {userData.type === 'applicant' && <ApplicantPanel/>}\n            {userData.type === 'business' && <BusinessPanel/>}\n            <button disabled={loading} onClick={handlePeelFromCluster}>Peel From Cluster</button>\n            <button disabled={loading} onClick={handleLeaveCluster}>Leave Cluster</button>\n\n        </div>\n    );\n}\n\n","/Users/sj/Documents/Programming/clusters/reactapp/src/components/forms/AccountForm.js",["133","134","135","136","137","138"],"import React, {useState, useEffect} from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport {useAuth} from '../../contexts/AuthContext';\nimport {\n    Form,\n    Button\n} from 'react-bootstrap';\n\nexport function AccountForm() {\n    const {userData, updateAccount} = useAuth();\n    const [name, setName] = useState(userData.name);\n    const [email, setEmail] = useState(userData.email);\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [worldId, setWorldId] = useState(userData.worldId);\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n\n\n    async function handleUpdateAccount() {\n        try {\n            setError('Updated Account');\n            setLoading(true);\n            if(!name || !email || !worldId) {\n               throw 'Fields not filled out';\n            } else if(password !== confirmPassword){\n                throw 'Passwords do not match';\n            }\n            const data = await updateAccount(name, email, password, worldId);\n        } catch(err) {\n            setError(err);\n        }\n        console.log(error);\n        setLoading(false);\n    }\n\n    return (\n\n        <div>\n        \n        <div className=\"register-container\">\n\n            <h2 className=\"register-header\">Update Account Details</h2>\n\n            <Form>\n                <Form.Group controlId=\"name\">\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control placeholder=\"Enter name\" \n                    value={name} onChange={e => setName(e.target.value)} />\n                </Form.Group>\n\n                <Form.Group controlId=\"worldId\">\n                    <Form.Label>College</Form.Label>\n                    <Form.Control placeholder=\"Enter college\"\n                    value={worldId} onChange={e => setWorldId(e.target.value)} />\n                </Form.Group>\n\n                <Form.Group controlId=\"email\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"Enter email\" \n                    value={email} onChange={e => setEmail(e.target.value)} />\n                </Form.Group>\n\n                <Form.Group controlId=\"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"Enter password\" \n                    value={password} onChange={e => setPassword(e.target.value)} />\n                </Form.Group>\n\n                <Form.Group controlId=\"confirmPassword\">\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"Confirm password\" \n                    value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} />\n                </Form.Group>\n\n                <div className=\"register-button\">\n                    <Button variant=\"primary\" disabled={loading} onClick={handleUpdateAccount} block>Update Info</Button>\n                </div>\n\n            </Form>\n\n        </div>\n\n    </div>\n\n\n        // <div>\n        //     College: <input value={worldId} onChange={e => setWorldId(e.target.value)}/>\n        //     <br/>\n        //     Name: <input value={name} onChange={e => setName(e.target.value)}/>\n        //     <br/>\n        //     Email: <input value={email} onChange={e => setEmail(e.target.value)}/>\n        //     <br/>\n        //     Password: <input type='password' value={password} onChange={e => setPassword(e.target.value)}/>\n        //     <br/>\n        //     Confirm Password: <input type='password' value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)}/>\n        //     <br/>\n        //     <button disabled={loading} onClick={handleUpdateAccount}>Submit</button>\n        // </div>\n    )\n}","/Users/sj/Documents/Programming/clusters/reactapp/src/components/pages/sub-pages/DormantDashboard.js",["139","140"],"import React, {useState} from 'react';\nimport {useAuth} from '../../../contexts/AuthContext';\nimport {UpdateForm} from '../../forms/UpdateForm';\nimport {useHistory} from 'react-router-dom';\n\nexport function DormantDashboard(){\n\n    const {userData, joinCluster} = useAuth();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const history = useHistory();\n\n\n    async function handleJoinCluster(){\n        try {\n            setError('Joined Cluster');\n            setLoading(true);\n            const {gpa, majors, standings, skills, interests, courses} = userData.features;\n            if(!gpa || !majors.length || !standings.length || !skills.length || !interests.length || !courses.length) {\n               throw 'Fields not filled out';\n            }\n            await joinCluster();\n        } catch(err) {\n            setError(err);\n        }\n        setLoading(false);\n        console.log(error);\n    }\n\n    return (\n        <div>\n            <UpdateForm/>\n            <button disabled={loading} onClick={handleJoinCluster}>Join Cluster</button>\n        </div>\n    );\n}","/Users/sj/Documents/Programming/clusters/reactapp/src/components/panels/ApplicantPanel.js",["141","142","143","144","145","146","147","148"],"import React, {useState, useEffect} from 'react';\nimport {useAuth} from '../../contexts/AuthContext';\n\nexport function ApplicantPanel(){\n\n    const {userData, leaveCluster} = useAuth();\n    const [change, setChange] = useState(false);\n    const [cap, setCap] = useState(1);\n    const [pool, setPool] = useState([]);\n    const [applied, setApplied] = useState([]);\n    const [received, setReceived] = useState([]);\n    const [interested, setInterested] = useState([]);\n    const [reviewed, setReviewed] = useState([]);\n    const [accepted, setAccepted] = useState([]);\n    const [declined, setDeclined] = useState([]);\n    const [rejected, setRejected] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState();\n\n    useEffect(async () => {\n        const data = await fetch(userData.links.all).then(response => {\n            if(response.ok){\n                return response.json();\n            }\n        });\n        setCap(data.cap);\n        setPool(data.pool);\n        setApplied(data.applied);\n        setReceived(data.received);\n        setInterested(data.interested);\n        setReviewed(data.reviewed);\n        setAccepted(data.accepted);\n        setDeclined(data.declined);\n        setRejected(data.rejected);\n        setLoading(false);\n    }, [userData, change]);\n\n\n    useEffect(async () => {\n        if(!cap){\n            try {\n                setError('Left Cluster');\n                setLoading(true);\n                await leaveCluster();\n            } catch(err) {\n                setError('Failed to leave cluster')\n            }\n        }\n    }, [cap])\n\n    async function handleSubmitApply(businessId){\n        try {\n            setError('Successfully Applied');\n            setLoading(true);\n            const data = await fetch(userData.links.applied, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'apply',\n                    businessId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setApplied(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to apply');\n        }\n    }\n\n    async function handleCancelApply(businessId){\n        try {\n            setError('Successfully Canceled');\n            setLoading(true);\n            const data = await fetch(userData.links.applied, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'cancel',\n                    businessId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setApplied(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to cancel');\n        }\n    }\n\n    async function handleAcceptReach(businessId){\n        try {\n            setError('Successfully Accepted Reach');\n            setLoading(true);\n            const data = await fetch(userData.links.received, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'accept',\n                    businessId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setReceived(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to accept reach');\n        }\n    }\n\n    async function handleDeclineReach(businessId){\n        try {\n            setError('Successfully declined reach');\n            setLoading(true);\n            const data = await fetch(userData.links.received, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'decline',\n                    businessId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setReceived(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to decline reach');\n        }\n    }\n\n    async function handleDeclineInterest(businessId){\n        try {\n            setError('Successfully declined communication');\n            setLoading(true);\n            const data = await fetch(userData.links.interested, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'decline',\n                    businessId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setInterested(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to decline communication');\n        }\n    }\n\n    async function handleAcceptOffer(businessId){\n        try {\n            setError('Successfully Accepted offer');\n            setLoading(true);\n            const data = await fetch(userData.links.reviewed, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'accept',\n                    businessId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            try {\n                setError('Left cluster');\n                setLoading(true);\n                await leaveCluster();\n            } catch(err) {\n                setError(err);\n            }\n        } catch(err) {\n            setError('Failed to accept reach');\n        }\n    }\n\n    async function handleDeclineOffer(businessId){\n        try {\n            setError('Successfully declined offer');\n            setLoading(true);\n            const data = await fetch(userData.links.reviewed, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'decline',\n                    businessId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setReceived(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to decline offer');\n        }\n    }\n\n    function renderPool(){\n        return pool.map(business => {\n            return (\n                <div>\n                    <h3>{business.name}</h3>\n                    <li>{business.features.skills}</li>\n                    <button onClick={() => handleSubmitApply(business.id)}>Apply</button>\n                </div>\n            )\n        })\n    }\n\n    function renderApplied(){\n        return applied.map(business => {\n            return (\n                <div>\n                    <h3>{business.name}</h3>\n                    <li>{business.features.skills}</li>\n                    <button onClick={() => handleCancelApply(business.id)}>Cancel</button>\n                </div>\n            )\n        })\n    }\n\n    function renderReceived(){\n        return received.map(business => {\n            return (\n                <div>\n                    <h3>{business.name}</h3>\n                    <li>{business.features.skills}</li>\n                    <button onClick={() => handleAcceptReach(business.id)}>Accept</button>\n                    <button onClick={() => handleDeclineReach(business.id)}>Decline</button>\n                </div>\n            )\n        })\n    }\n\n    function renderInterested(){\n        return interested.map(business => {\n            return (\n                <div>\n                    <h3>{business.name}</h3>\n                    <li>{business.features.skills}</li>\n                    <button onClick={() => handleDeclineInterest(business.id)}>Decline</button>\n                </div>\n            )\n        })\n    }\n\n    function renderReviewed(){\n        return reviewed.map(business => {\n            return (\n                <div>\n                    <h3>{business.name}</h3>\n                    <li>{business.features.skills}</li>\n                    <button onClick={() => handleAcceptOffer(business.id)}>Accept</button>\n                    <button onClick={() => handleDeclineOffer(business.id)}>Decline</button>\n                </div>\n            )\n        })\n    }\n\n    function renderAccepted(){\n        return accepted.map(business => {\n            return (\n                <div>\n                    <h3>{business.name}</h3>\n                    <li>{business.features.skills}</li>\n                </div>\n            )\n        })\n    }\n\n    return (\n        <div>\n            <h2>Pool</h2>\n            {renderPool()}\n            <br/>\n            <h2>Applied</h2>\n            {renderApplied()}\n            <h2>Received</h2>\n            {renderReceived()}\n            <h2>Interested</h2>\n            {renderInterested()}\n            <h2>Reviewed</h2>\n            {renderReviewed()}\n            <h2>Accepted</h2>\n            {renderAccepted()}\n        </div>\n    );\n}\n\n","/Users/sj/Documents/Programming/clusters/reactapp/src/components/panels/BusinessPanel.js",["149","150","151","152","153","154","155"],"import React, {useState, useEffect} from 'react';\nimport {useAuth} from '../../contexts/AuthContext';\n\nexport function BusinessPanel(){\n\n    const {userData, leaveCluster} = useAuth();\n    const [change, setChange] = useState(false);\n    const [cap, setCap] = useState(1);\n    const [pool, setPool] = useState([]);\n    const [reached, setReached] = useState([]);\n    const [received, setReceived] = useState([]);\n    const [interested, setInterested] = useState([]);\n    const [offered, setOffered] = useState([]);\n    const [declined, setDeclined] = useState([]);\n    const [rejected, setRejected] = useState([]);\n    const [accepted, setAccepted] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState();\n\n    useEffect(async () => {\n        const data = await fetch(userData.links.all).then(response => {\n            if(response.ok){\n                return response.json();\n            }\n        });\n        setCap(data.cap);\n        setPool(data.pool);\n        setReached(data.reached);\n        setReceived(data.received);\n        setInterested(data.interested);\n        setOffered(data.offered);\n        setDeclined(data.declined);\n        setRejected(data.rejected);\n        setAccepted(data.accepted);\n        setLoading(false);\n    }, [userData, change]);\n\n    useEffect(async () => {\n        if(!cap){\n            try {\n                setError('Left cluster');\n                setLoading(true);\n                await leaveCluster()\n            } catch (err) {\n                setError('failed to leave cluster')\n            }\n        }\n    }, [cap])\n\n    async function handleSubmitReach(applicantId){\n        try {\n            setError('Successfully Reached');\n            setLoading(true);\n            const data = await fetch(userData.links.reached, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'reach',\n                    applicantId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setReached(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to reach');\n        }\n    }\n\n    async function handleCancelReach(applicantId){\n        try {\n            setError('Successfully Canceled');\n            setLoading(true);\n            const data = await fetch(userData.links.reached, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'cancel',\n                    applicantId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setReached(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to cancel');\n        }\n    }\n\n    async function handleAcceptApply(applicantId){\n        try {\n            setError('Successfully Accepted Apply');\n            setLoading(true);\n            const data = await fetch(userData.links.received, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'accept',\n                    applicantId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setReceived(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to accept apply');\n        }\n    }\n\n    async function handleDeclineApply(applicantId){\n        try {\n            setError('Successfully declined apply');\n            setLoading(true);\n            const data = await fetch(userData.links.received, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'decline',\n                    applicantId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setReceived(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to decline apply');\n        }\n    }\n\n    async function handleOfferInterest(applicantId){\n        try {\n            setError('Successfully offered');\n            setLoading(true);\n            const data = await fetch(userData.links.interested, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'offer',\n                    applicantId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setInterested(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to offer');\n        }\n    }\n\n    async function handleDeclineInterest(applicantId){\n        try {\n            setError('Successfully declined communication');\n            setLoading(true);\n            const data = await fetch(userData.links.interested, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'decline',\n                    applicantId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setInterested(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to decline communication');\n        }\n    }\n\n    async function handleRescindOffer(applicantId){\n        try {\n            setError('Successfully rescinded offer');\n            setLoading(true);\n            const data = await fetch(userData.links.offered, {\n                method: 'PUT',\n                body: JSON.stringify({\n                    action: 'rescind',\n                    applicantId\n                })\n            }).then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n            });\n            setOffered(data);\n            setChange(!change);\n        } catch (err) {\n            setError('Failed to accept reach');\n        }\n    }\n\n\n    function renderPool(){\n        return pool.map(applicant => {\n            return (\n                <div>\n                    <h3>{applicant.name}</h3>\n                    <li>{applicant.features.skills}</li>\n                    <button onClick={() => handleSubmitReach(applicant.id)}>Reach</button>\n                </div>\n            )\n        })\n    }\n\n    function renderReached(){\n        return reached.map(applicant => {\n            return (\n                <div>\n                    <h3>{applicant.name}</h3>\n                    <li>{applicant.features.skills}</li>\n                    <button onClick={() => handleCancelReach(applicant.id)}>Reach</button>\n                </div>\n            )\n        })\n    }\n\n    function renderReceived(){\n        return received.map(applicant => {\n            return (\n                <div>\n                    <h3>{applicant.name}</h3>\n                    <li>{applicant.features.skills}</li>\n                    <button onClick={() => handleAcceptApply(applicant.id)}>Accept</button>\n                    <button onClick={() => handleDeclineApply(applicant.id)}>Decline</button>\n                </div>\n            )\n        })\n    }\n\n    function renderInterested(){\n        return interested.map(applicant => {\n            return (\n                <div>\n                    <h3>{applicant.name}</h3>\n                    <li>{applicant.features.skills}</li>\n                    <button onClick={() => handleOfferInterest(applicant.id)}>Offer</button>\n                    <button onClick={() => handleDeclineInterest(applicant.id)}>Decline</button>\n                </div>\n            )\n        })\n    }\n\n    function renderOffered(){\n        return offered.map(applicant => {\n            return (\n                <div>\n                    <h3>{applicant.name}</h3>\n                    <li>{applicant.features.skills}</li>\n                    <button onClick={() => handleRescindOffer(applicant.id)}>Rescind</button>\n                </div>\n            )\n        })\n    }\n\n    function renderAccepted(){\n        return accepted.map(applicant => {\n            return (\n                <div>\n                    <h3>{applicant.name}</h3>\n                    <li>{applicant.features.skills}</li>\n                </div>\n            )\n        })\n    }\n\n    return (\n        <div>\n            <h2>Pool</h2>\n            {renderPool()}\n            <br/>\n            <h2>Reached</h2>\n            {renderReached()}\n            <h2>Received</h2>\n            {renderReceived()}\n            <h2>Interested</h2>\n            {renderInterested()}\n            <h2>Offered</h2>\n            {renderOffered()}\n            <h2>Accepted</h2>\n            {renderAccepted()}\n        </div>\n    );\n}\n\n",["156","157"],{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":3,"column":8,"nodeType":"164","messageId":"165","endLine":3,"endColumn":16},{"ruleId":"162","severity":1,"message":"166","line":96,"column":15,"nodeType":"164","messageId":"165","endLine":96,"endColumn":19},{"ruleId":"167","severity":1,"message":"168","line":161,"column":8,"nodeType":"169","endLine":161,"endColumn":10,"suggestions":"170"},{"ruleId":"162","severity":1,"message":"171","line":1,"column":16,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"171","line":1,"column":16,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"171","line":1,"column":26,"nodeType":"164","messageId":"165","endLine":1,"endColumn":35},{"ruleId":"162","severity":1,"message":"172","line":3,"column":9,"nodeType":"164","messageId":"165","endLine":3,"endColumn":19},{"ruleId":"162","severity":1,"message":"173","line":14,"column":12,"nodeType":"164","messageId":"165","endLine":14,"endColumn":17},{"ruleId":"167","severity":1,"message":"174","line":19,"column":15,"nodeType":"175","endLine":32,"endColumn":6},{"ruleId":"162","severity":1,"message":"171","line":1,"column":26,"nodeType":"164","messageId":"165","endLine":1,"endColumn":35},{"ruleId":"162","severity":1,"message":"176","line":15,"column":12,"nodeType":"164","messageId":"165","endLine":15,"endColumn":19},{"ruleId":"162","severity":1,"message":"177","line":16,"column":23,"nodeType":"164","messageId":"165","endLine":16,"endColumn":31},{"ruleId":"178","severity":1,"message":"179","line":24,"column":17,"nodeType":"180","messageId":"181","endLine":24,"endColumn":45},{"ruleId":"162","severity":1,"message":"182","line":3,"column":8,"nodeType":"164","messageId":"165","endLine":3,"endColumn":14},{"ruleId":"167","severity":1,"message":"168","line":27,"column":8,"nodeType":"169","endLine":27,"endColumn":10,"suggestions":"183"},{"ruleId":"178","severity":1,"message":"179","line":34,"column":16,"nodeType":"180","messageId":"181","endLine":34,"endColumn":46},{"ruleId":"162","severity":1,"message":"171","line":1,"column":26,"nodeType":"164","messageId":"165","endLine":1,"endColumn":35},{"ruleId":"162","severity":1,"message":"184","line":3,"column":8,"nodeType":"164","messageId":"165","endLine":3,"endColumn":17},{"ruleId":"178","severity":1,"message":"179","line":30,"column":16,"nodeType":"180","messageId":"181","endLine":30,"endColumn":46},{"ruleId":"178","severity":1,"message":"179","line":32,"column":17,"nodeType":"180","messageId":"181","endLine":32,"endColumn":48},{"ruleId":"162","severity":1,"message":"171","line":1,"column":26,"nodeType":"164","messageId":"165","endLine":1,"endColumn":35},{"ruleId":"162","severity":1,"message":"185","line":12,"column":11,"nodeType":"164","messageId":"165","endLine":12,"endColumn":18},{"ruleId":"162","severity":1,"message":"171","line":1,"column":26,"nodeType":"164","messageId":"165","endLine":1,"endColumn":35},{"ruleId":"162","severity":1,"message":"186","line":2,"column":9,"nodeType":"164","messageId":"165","endLine":2,"endColumn":13},{"ruleId":"162","severity":1,"message":"185","line":18,"column":11,"nodeType":"164","messageId":"165","endLine":18,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":26,"column":16,"nodeType":"180","messageId":"181","endLine":26,"endColumn":46},{"ruleId":"178","severity":1,"message":"179","line":28,"column":17,"nodeType":"180","messageId":"181","endLine":28,"endColumn":48},{"ruleId":"162","severity":1,"message":"166","line":30,"column":19,"nodeType":"164","messageId":"165","endLine":30,"endColumn":23},{"ruleId":"162","severity":1,"message":"185","line":11,"column":11,"nodeType":"164","messageId":"165","endLine":11,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":20,"column":16,"nodeType":"180","messageId":"181","endLine":20,"endColumn":46},{"ruleId":"162","severity":1,"message":"187","line":15,"column":12,"nodeType":"164","messageId":"165","endLine":15,"endColumn":20},{"ruleId":"162","severity":1,"message":"188","line":16,"column":12,"nodeType":"164","messageId":"165","endLine":16,"endColumn":20},{"ruleId":"162","severity":1,"message":"176","line":17,"column":12,"nodeType":"164","messageId":"165","endLine":17,"endColumn":19},{"ruleId":"162","severity":1,"message":"173","line":18,"column":12,"nodeType":"164","messageId":"165","endLine":18,"endColumn":17},{"ruleId":"167","severity":1,"message":"174","line":20,"column":15,"nodeType":"175","endLine":36,"endColumn":6},{"ruleId":"167","severity":1,"message":"174","line":39,"column":15,"nodeType":"175","endLine":49,"endColumn":6},{"ruleId":"167","severity":1,"message":"189","line":49,"column":8,"nodeType":"169","endLine":49,"endColumn":13,"suggestions":"190"},{"ruleId":"162","severity":1,"message":"166","line":165,"column":19,"nodeType":"164","messageId":"165","endLine":165,"endColumn":23},{"ruleId":"162","severity":1,"message":"187","line":14,"column":12,"nodeType":"164","messageId":"165","endLine":14,"endColumn":20},{"ruleId":"162","severity":1,"message":"188","line":15,"column":12,"nodeType":"164","messageId":"165","endLine":15,"endColumn":20},{"ruleId":"162","severity":1,"message":"176","line":17,"column":12,"nodeType":"164","messageId":"165","endLine":17,"endColumn":19},{"ruleId":"162","severity":1,"message":"173","line":18,"column":12,"nodeType":"164","messageId":"165","endLine":18,"endColumn":17},{"ruleId":"167","severity":1,"message":"174","line":20,"column":15,"nodeType":"175","endLine":36,"endColumn":6},{"ruleId":"167","severity":1,"message":"174","line":38,"column":15,"nodeType":"175","endLine":48,"endColumn":6},{"ruleId":"167","severity":1,"message":"189","line":48,"column":8,"nodeType":"169","endLine":48,"endColumn":13,"suggestions":"191"},{"ruleId":"158","replacedBy":"192"},{"ruleId":"160","replacedBy":"193"},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userData'. Either include it or remove the dependency array.","ArrayExpression",["196"],"'useEffect' is defined but never used.","'UpdateForm' is defined but never used.","'error' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'loading' is assigned a value but never used.","'userData' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'bcrypt' is defined but never used.",["197"],"'TagsInput' is defined but never used.","'history' is assigned a value but never used.","'Link' is defined but never used.","'declined' is assigned a value but never used.","'rejected' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'leaveCluster'. Either include it or remove the dependency array.",["198"],["199"],["194"],["195"],"no-global-assign","no-unsafe-negation",{"desc":"200","fix":"201"},{"desc":"200","fix":"202"},{"desc":"203","fix":"204"},{"desc":"203","fix":"205"},"Update the dependencies array to be: [userData]",{"range":"206","text":"207"},{"range":"208","text":"207"},"Update the dependencies array to be: [cap, leaveCluster]",{"range":"209","text":"210"},{"range":"211","text":"210"},[5220,5222],"[userData]",[1006,1008],[1609,1614],"[cap, leaveCluster]",[1603,1608]]