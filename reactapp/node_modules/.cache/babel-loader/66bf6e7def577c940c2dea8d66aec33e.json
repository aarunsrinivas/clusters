{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aarun\\\\PycharmProjects\\\\clusters\\\\reactapp\\\\src\\\\contexts\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport bcrypt from 'bcryptjs';\nconst AuthContext = /*#__PURE__*/React.createContext();\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  async function registerUser(name, email, password, type, major, standing, gpa, skills) {\n    const temp = await fetch(`/users?email=${email}`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n\n    if (temp.length) {\n      throw 'This email has already been taken';\n    }\n\n    const destination = type === 'applicant' ? '/applicants' : '/businesses';\n    const data = await fetch(destination, {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        email,\n        password: bcrypt.hashSync(password, 10),\n        features: {\n          type,\n          major,\n          standing,\n          gpa: parseFloat(gpa),\n          skills\n        }\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setCurrentUser(data);\n    setLoading(false);\n  }\n\n  async function loginUser(email, password) {\n    const temp = await fetch(`/users?email=${email}`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n\n    if (!temp.length) {\n      throw 'No email associated with account';\n    } else if (!(await bcrypt.compare(password, temp[0].password))) {\n      throw 'Invalid password';\n    }\n\n    setCurrentUser(temp[0]);\n    setLoading(false);\n  }\n\n  async function updateUser(name, email, password, major, standing, gpa, skills) {\n    if (email !== currentUser.email) {\n      const temp = await fetch(`/users?email=${email}`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      });\n\n      if (temp.length) {\n        throw 'This email has been taken';\n      }\n    }\n\n    const data = await fetch(currentUser.links.self, {\n      method: 'PUT',\n      body: JSON.stringify({\n        name,\n        email,\n        password: password ? bcrypt.hashSync(password, 10) : currentUser.password,\n        features: {\n          type: 'applicant',\n          major,\n          standing,\n          gpa: parseFloat(gpa),\n          skills\n        }\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setCurrentUser(data);\n    setLoading(false);\n  }\n\n  async function logoutUser() {\n    setCurrentUser(null);\n  }\n\n  async function deleteUser() {\n    if (!currentUser) {\n      throw 'No user to be deleted';\n    }\n\n    const temp = await fetch(currentUser.links.self, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setCurrentUser(null);\n    setLoading(false);\n  }\n\n  async function joinCluster() {\n    if (!currentUser) {\n      throw 'No user to be joined';\n    } else if (currentUser.clusterId) {\n      throw 'Already in a cluster';\n    }\n\n    const data = await fetch(currentUser.links.self, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'join'\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setCurrentUser(data);\n    setLoading(false);\n  }\n\n  async function leaveCluster() {\n    if (!currentUser) {\n      throw 'No user to be joined';\n    } else if (!currentUser.clusterId) {\n      throw 'Already outside cluster';\n    }\n\n    const data = await fetch(currentUser.links.self, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'leave'\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setCurrentUser(data);\n    setLoading(false);\n  }\n\n  async function peelFromCluster() {\n    if (!currentUser) {\n      throw 'No user to be joined';\n    } else if (!currentUser.clusterId) {\n      throw 'Cannot peel from outside cluster';\n    }\n\n    const data = await fetch(currentUser.links.self, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'peel'\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setCurrentUser(data);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    setLoading(false);\n  }, [currentUser]);\n  const value = {\n    currentUser,\n    registerUser,\n    loginUser,\n    updateUser,\n    logoutUser,\n    deleteUser,\n    joinCluster,\n    peelFromCluster,\n    leaveCluster\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AuthProvider, \"1cdeWWSmbSz3cOWqWLAt+Ta4DMY=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/aarun/PycharmProjects/clusters/reactapp/src/contexts/AuthContext.js"],"names":["React","useContext","useState","useEffect","bcrypt","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loading","setLoading","registerUser","name","email","password","type","major","standing","gpa","skills","temp","fetch","then","response","ok","json","length","destination","data","method","body","JSON","stringify","hashSync","features","parseFloat","loginUser","compare","updateUser","links","self","logoutUser","deleteUser","joinCluster","clusterId","action","leaveCluster","peelFromCluster","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,EAApB;AAEA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACtB,SAAON,UAAU,CAACI,WAAD,CAAjB;AACH;;GAFeE,O;;AAIhB,OAAO,SAASC,YAAT,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAkC;AAAA;;AAErC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,EAA9C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;;AAEA,iBAAeY,YAAf,CAA4BC,IAA5B,EAAkCC,KAAlC,EAAyCC,QAAzC,EAAmDC,IAAnD,EAAyDC,KAAzD,EAAgEC,QAAhE,EAA0EC,GAA1E,EAA+EC,MAA/E,EAAuF;AACnF,UAAMC,IAAI,GAAG,MAAMC,KAAK,CAAE,gBAAeR,KAAM,EAAvB,CAAL,CAA+BS,IAA/B,CAAoCC,QAAQ,IAAI;AAC/D,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;AACJ,KAJkB,CAAnB;;AAKA,QAAGL,IAAI,CAACM,MAAR,EAAe;AACX,YAAM,mCAAN;AACH;;AACD,UAAMC,WAAW,GAAGZ,IAAI,KAAK,WAAT,GAAuB,aAAvB,GAAuC,aAA3D;AACA,UAAMa,IAAI,GAAG,MAAMP,KAAK,CAACM,WAAD,EAAc;AAClCE,MAAAA,MAAM,EAAE,MAD0B;AAElCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBpB,QAAAA,IADiB;AAEjBC,QAAAA,KAFiB;AAGjBC,QAAAA,QAAQ,EAAEb,MAAM,CAACgC,QAAP,CAAgBnB,QAAhB,EAA0B,EAA1B,CAHO;AAIjBoB,QAAAA,QAAQ,EAAE;AACNnB,UAAAA,IADM;AAENC,UAAAA,KAFM;AAGNC,UAAAA,QAHM;AAINC,UAAAA,GAAG,EAAEiB,UAAU,CAACjB,GAAD,CAJT;AAKNC,UAAAA;AALM;AAJO,OAAf;AAF4B,KAAd,CAAL,CAchBG,IAdgB,CAcXC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;AACJ,KAlBkB,CAAnB;AAmBAjB,IAAAA,cAAc,CAACoB,IAAD,CAAd;AACAlB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAED,iBAAe0B,SAAf,CAAyBvB,KAAzB,EAAgCC,QAAhC,EAAyC;AACrC,UAAMM,IAAI,GAAG,MAAMC,KAAK,CAAE,gBAAeR,KAAM,EAAvB,CAAL,CAA+BS,IAA/B,CAAoCC,QAAQ,IAAI;AAC/D,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;AACJ,KAJkB,CAAnB;;AAKA,QAAG,CAACL,IAAI,CAACM,MAAT,EAAgB;AACZ,YAAM,kCAAN;AACH,KAFD,MAEO,IAAG,EAAE,MAAMzB,MAAM,CAACoC,OAAP,CAAevB,QAAf,EAAyBM,IAAI,CAAC,CAAD,CAAJ,CAAQN,QAAjC,CAAR,CAAH,EAAuD;AAC1D,YAAM,kBAAN;AACH;;AACDN,IAAAA,cAAc,CAACY,IAAI,CAAC,CAAD,CAAL,CAAd;AACAV,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAED,iBAAe4B,UAAf,CAA0B1B,IAA1B,EAAgCC,KAAhC,EAAuCC,QAAvC,EAAiDE,KAAjD,EAAwDC,QAAxD,EAAkEC,GAAlE,EAAuEC,MAAvE,EAA8E;AAC1E,QAAGN,KAAK,KAAKN,WAAW,CAACM,KAAzB,EAA+B;AAC3B,YAAMO,IAAI,GAAG,MAAMC,KAAK,CAAE,gBAAeR,KAAM,EAAvB,CAAL,CAA+BS,IAA/B,CAAoCC,QAAQ,IAAI;AAC/D,YAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;AACJ,OAJkB,CAAnB;;AAKA,UAAGL,IAAI,CAACM,MAAR,EAAe;AACX,cAAM,2BAAN;AACH;AACJ;;AACD,UAAME,IAAI,GAAG,MAAMP,KAAK,CAACd,WAAW,CAACgC,KAAZ,CAAkBC,IAAnB,EAAyB;AAC7CX,MAAAA,MAAM,EAAE,KADqC;AAE7CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBpB,QAAAA,IADiB;AAEjBC,QAAAA,KAFiB;AAGjBC,QAAAA,QAAQ,EAAEA,QAAQ,GAAGb,MAAM,CAACgC,QAAP,CAAgBnB,QAAhB,EAA0B,EAA1B,CAAH,GAAmCP,WAAW,CAACO,QAHhD;AAIjBoB,QAAAA,QAAQ,EAAE;AACNnB,UAAAA,IAAI,EAAE,WADA;AAENC,UAAAA,KAFM;AAGNC,UAAAA,QAHM;AAINC,UAAAA,GAAG,EAAEiB,UAAU,CAACjB,GAAD,CAJT;AAKNC,UAAAA;AALM;AAJO,OAAf;AAFuC,KAAzB,CAAL,CAchBG,IAdgB,CAcXC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;AACJ,KAlBkB,CAAnB;AAmBAjB,IAAAA,cAAc,CAACoB,IAAD,CAAd;AACAlB,IAAAA,UAAU,CAAC,KAAD,CAAV;AAEH;;AAED,iBAAe+B,UAAf,GAA2B;AACvBjC,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH;;AAED,iBAAekC,UAAf,GAA2B;AACvB,QAAG,CAACnC,WAAJ,EAAgB;AACZ,YAAM,uBAAN;AACH;;AACD,UAAMa,IAAI,GAAG,MAAMC,KAAK,CAACd,WAAW,CAACgC,KAAZ,CAAkBC,IAAnB,EAAyB;AAC7CX,MAAAA,MAAM,EAAE;AADqC,KAAzB,CAAL,CAEhBP,IAFgB,CAEXC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;AACJ,KANkB,CAAnB;AAOAjB,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAED,iBAAeiC,WAAf,GAA4B;AACxB,QAAG,CAACpC,WAAJ,EAAgB;AACZ,YAAM,sBAAN;AACH,KAFD,MAEO,IAAGA,WAAW,CAACqC,SAAf,EAAyB;AAC5B,YAAM,sBAAN;AACH;;AACD,UAAMhB,IAAI,GAAG,MAAMP,KAAK,CAACd,WAAW,CAACgC,KAAZ,CAAkBC,IAAnB,EAAyB;AAC7CX,MAAAA,MAAM,EAAE,MADqC;AAE7CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACa,QAAAA,MAAM,EAAE;AAAT,OAAf;AAFuC,KAAzB,CAAL,CAGhBvB,IAHgB,CAGXC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;AACJ,KAPkB,CAAnB;AAQAjB,IAAAA,cAAc,CAACoB,IAAD,CAAd;AACAlB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAED,iBAAeoC,YAAf,GAA6B;AACzB,QAAG,CAACvC,WAAJ,EAAgB;AACZ,YAAM,sBAAN;AACH,KAFD,MAEO,IAAG,CAACA,WAAW,CAACqC,SAAhB,EAA0B;AAC7B,YAAM,yBAAN;AACH;;AACD,UAAMhB,IAAI,GAAG,MAAMP,KAAK,CAACd,WAAW,CAACgC,KAAZ,CAAkBC,IAAnB,EAAyB;AAC7CX,MAAAA,MAAM,EAAE,MADqC;AAE7CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACa,QAAAA,MAAM,EAAE;AAAT,OAAf;AAFuC,KAAzB,CAAL,CAGhBvB,IAHgB,CAGXC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;AACJ,KAPkB,CAAnB;AAQAjB,IAAAA,cAAc,CAACoB,IAAD,CAAd;AACAlB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAED,iBAAeqC,eAAf,GAAgC;AAC5B,QAAG,CAACxC,WAAJ,EAAgB;AACZ,YAAM,sBAAN;AACH,KAFD,MAEO,IAAG,CAACA,WAAW,CAACqC,SAAhB,EAA0B;AAC7B,YAAM,kCAAN;AACH;;AACD,UAAMhB,IAAI,GAAG,MAAMP,KAAK,CAACd,WAAW,CAACgC,KAAZ,CAAkBC,IAAnB,EAAyB;AAC7CX,MAAAA,MAAM,EAAE,MADqC;AAE7CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACa,QAAAA,MAAM,EAAE;AAAT,OAAf;AAFuC,KAAzB,CAAL,CAGhBvB,IAHgB,CAGXC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;AACJ,KAPkB,CAAnB;AAQAjB,IAAAA,cAAc,CAACoB,IAAD,CAAd;AACAlB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAEDV,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAFQ,EAEN,CAACH,WAAD,CAFM,CAAT;AAIA,QAAMyC,KAAK,GAAG;AACVzC,IAAAA,WADU;AAEVI,IAAAA,YAFU;AAGVyB,IAAAA,SAHU;AAIVE,IAAAA,UAJU;AAKVG,IAAAA,UALU;AAMVC,IAAAA,UANU;AAOVC,IAAAA,WAPU;AAQVI,IAAAA,eARU;AASVD,IAAAA;AATU,GAAd;AAYA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,KAA7B;AAAA,cACK,CAACvC,OAAD,IAAYH;AADjB;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;IAtLeD,Y;;KAAAA,Y","sourcesContent":["import React, {useContext, useState, useEffect} from 'react';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({children}) {\r\n\r\n    const [currentUser, setCurrentUser] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    async function registerUser(name, email, password, type, major, standing, gpa, skills) {\r\n        const temp = await fetch(`/users?email=${email}`).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        if(temp.length){\r\n            throw 'This email has already been taken';\r\n        }\r\n        const destination = type === 'applicant' ? '/applicants' : '/businesses';\r\n        const data = await fetch(destination, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                name,\r\n                email,\r\n                password: bcrypt.hashSync(password, 10),\r\n                features: {\r\n                    type,\r\n                    major,\r\n                    standing,\r\n                    gpa: parseFloat(gpa),\r\n                    skills\r\n                }\r\n            })\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setCurrentUser(data);\r\n        setLoading(false);\r\n    }\r\n\r\n    async function loginUser(email, password){\r\n        const temp = await fetch(`/users?email=${email}`).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        if(!temp.length){\r\n            throw 'No email associated with account';\r\n        } else if(!(await bcrypt.compare(password, temp[0].password))){\r\n            throw 'Invalid password';\r\n        }\r\n        setCurrentUser(temp[0]);\r\n        setLoading(false);\r\n    }\r\n\r\n    async function updateUser(name, email, password, major, standing, gpa, skills){\r\n        if(email !== currentUser.email){\r\n            const temp = await fetch(`/users?email=${email}`).then(response => {\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            });\r\n            if(temp.length){\r\n                throw 'This email has been taken';\r\n            }\r\n        }\r\n        const data = await fetch(currentUser.links.self, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                name,\r\n                email,\r\n                password: password ? bcrypt.hashSync(password, 10) : currentUser.password,\r\n                features: {\r\n                    type: 'applicant',\r\n                    major,\r\n                    standing,\r\n                    gpa: parseFloat(gpa),\r\n                    skills\r\n                }\r\n            })\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setCurrentUser(data);\r\n        setLoading(false);\r\n\r\n    }\r\n\r\n    async function logoutUser(){\r\n        setCurrentUser(null);\r\n    }\r\n\r\n    async function deleteUser(){\r\n        if(!currentUser){\r\n            throw 'No user to be deleted'\r\n        }\r\n        const temp = await fetch(currentUser.links.self, {\r\n            method: 'DELETE'\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setCurrentUser(null);\r\n        setLoading(false);\r\n    }\r\n\r\n    async function joinCluster(){\r\n        if(!currentUser){\r\n            throw 'No user to be joined';\r\n        } else if(currentUser.clusterId){\r\n            throw 'Already in a cluster';\r\n        }\r\n        const data = await fetch(currentUser.links.self, {\r\n            method: 'POST',\r\n            body: JSON.stringify({action: 'join'})\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setCurrentUser(data);\r\n        setLoading(false);\r\n    }\r\n\r\n    async function leaveCluster(){\r\n        if(!currentUser){\r\n            throw 'No user to be joined';\r\n        } else if(!currentUser.clusterId){\r\n            throw 'Already outside cluster';\r\n        }\r\n        const data = await fetch(currentUser.links.self, {\r\n            method: 'POST',\r\n            body: JSON.stringify({action: 'leave'})\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setCurrentUser(data);\r\n        setLoading(false);\r\n    }\r\n\r\n    async function peelFromCluster(){\r\n        if(!currentUser){\r\n            throw 'No user to be joined';\r\n        } else if(!currentUser.clusterId){\r\n            throw 'Cannot peel from outside cluster';\r\n        }\r\n        const data = await fetch(currentUser.links.self, {\r\n            method: 'POST',\r\n            body: JSON.stringify({action: 'peel'})\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setCurrentUser(data);\r\n        setLoading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(false)\r\n    }, [currentUser]);\r\n\r\n    const value = {\r\n        currentUser,\r\n        registerUser,\r\n        loginUser,\r\n        updateUser,\r\n        logoutUser,\r\n        deleteUser,\r\n        joinCluster,\r\n        peelFromCluster,\r\n        leaveCluster,\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}