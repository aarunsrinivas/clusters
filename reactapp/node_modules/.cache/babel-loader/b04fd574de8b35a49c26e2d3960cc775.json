{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aarun\\\\PycharmProjects\\\\clusters\\\\reactapp\\\\src\\\\contexts\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { auth } from '../firebase';\nimport firebase from 'firebase/app';\nconst AuthContext = /*#__PURE__*/React.createContext();\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n\n  const [currentUser, setCurrentUser] = useState(JSON.parse(sessionStorage.getItem('currentUser')) || null);\n  const [userData, setUserData] = useState(JSON.parse(sessionStorage.getItem('userData')) || null);\n  const [loading, setLoading] = useState(true);\n\n  async function registerUser(name, email, password, type, worldId) {\n    const fire = auth.createUserWithEmailAndPassword(email, password);\n    const destination = type === 'applicant' ? `/worlds/${worldId}/applicants` : `/worlds/${worldId}/businesses`;\n    const data = await fetch(destination, {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        email,\n        worldId\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setUserData(data);\n    return fire;\n  }\n\n  async function loginUser(email, password) {\n    const fire = auth.signInWithEmailAndPassword(email, password);\n    const data = await fetch(`/users?email=${email}`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setUserData(data);\n    return fire;\n  }\n\n  async function updateAccount(name, email, password, worldId) {\n    currentUser.updateEmail(email);\n    password && currentUser.updatePassword(password);\n    const data = await fetch(userData.links.self, {\n      method: 'PUT',\n      body: JSON.stringify({\n        action: 'account',\n        name,\n        email,\n        worldId\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setUserData(data);\n  }\n\n  async function updateFeatures(cap, gpa, majors, standings, skills, interests, courses) {\n    console.log(firebase.auth().currentUser);\n    const data = await fetch(userData.links.self, {\n      method: 'PUT',\n      body: JSON.stringify({\n        action: 'features',\n        cap: parseInt(cap),\n        gpa: parseFloat(gpa),\n        majors,\n        standings,\n        skills,\n        interests,\n        courses\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setUserData(data);\n  }\n\n  async function logoutUser() {\n    const fire = auth.signOut();\n    setUserData(null);\n    return fire;\n  }\n\n  async function deleteUser() {\n    const data = await fetch(userData.links.self, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    const fire = currentUser.delete();\n    return fire;\n  }\n\n  async function joinCluster() {\n    const data = await fetch(userData.links.self, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'join'\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setUserData(data);\n  }\n\n  async function leaveCluster() {\n    const data = await fetch(userData.links.self, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'leave'\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setUserData(data);\n  }\n\n  async function peelFromCluster() {\n    const data = await fetch(userData.links.self, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'peel'\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    setUserData(data);\n  }\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(async user => {\n      if (!user) {\n        sessionStorage.clear();\n      } else {\n        const data = await fetch(`/users?email=${user.email}`).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n        });\n        setUserData(data);\n        sessionStorage.setItem('currentUser', JSON.stringify(user));\n      }\n\n      setCurrentUser(user);\n    });\n    setLoading(false);\n    return unsubscribe;\n  }, []);\n  useEffect(() => {\n    !currentUser ? sessionStorage.clear() : sessionStorage.setItem('userData', JSON.stringify(userData));\n    setLoading(false);\n  }, [userData]);\n  const value = {\n    currentUser,\n    userData,\n    registerUser,\n    loginUser,\n    logoutUser,\n    deleteUser,\n    updateAccount,\n    updateFeatures,\n    joinCluster,\n    peelFromCluster,\n    leaveCluster\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AuthProvider, \"yEo7k+WQr8Q90GNSPzWOJcy+2F0=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/aarun/PycharmProjects/clusters/reactapp/src/contexts/AuthContext.js"],"names":["React","useContext","useState","useEffect","auth","firebase","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","JSON","parse","sessionStorage","getItem","userData","setUserData","loading","setLoading","registerUser","name","email","password","type","worldId","fire","createUserWithEmailAndPassword","destination","data","fetch","method","body","stringify","then","response","ok","json","loginUser","signInWithEmailAndPassword","updateAccount","updateEmail","updatePassword","links","self","action","updateFeatures","cap","gpa","majors","standings","skills","interests","courses","console","log","parseInt","parseFloat","logoutUser","signOut","deleteUser","delete","joinCluster","leaveCluster","peelFromCluster","unsubscribe","onAuthStateChanged","user","clear","setItem","value"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect} from 'react';\r\nimport {auth} from '../firebase';\r\nimport firebase from 'firebase/app';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({children}) {\r\n\r\n    const [currentUser, setCurrentUser] = useState(JSON.parse(sessionStorage.getItem('currentUser')) || null);\r\n    const [userData, setUserData] = useState(JSON.parse(sessionStorage.getItem('userData')) || null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n\r\n    async function registerUser(name, email, password, type, worldId) {\r\n        const fire = auth.createUserWithEmailAndPassword(email, password);\r\n        const destination = type === 'applicant' ? `/worlds/${worldId}/applicants` : `/worlds/${worldId}/businesses`;\r\n        const data = await fetch(destination, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                name,\r\n                email,\r\n                worldId\r\n            })\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        })\r\n        setUserData(data);\r\n        return fire;\r\n    }\r\n\r\n    async function loginUser(email, password){\r\n        const fire = auth.signInWithEmailAndPassword(email, password);\r\n        const data = await fetch(`/users?email=${email}`).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setUserData(data);\r\n        return fire;\r\n    }\r\n\r\n    async function updateAccount(name, email, password, worldId){\r\n        currentUser.updateEmail(email);\r\n        password && currentUser.updatePassword(password);\r\n        const data = await fetch(userData.links.self, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                action: 'account',\r\n                name,\r\n                email,\r\n                worldId\r\n            })\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setUserData(data);\r\n    }\r\n\r\n    async function updateFeatures(cap, gpa, majors, standings, skills, interests, courses){\r\n        console.log(firebase.auth().currentUser);\r\n        const data = await fetch(userData.links.self, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                action: 'features',\r\n                cap: parseInt(cap),\r\n                gpa: parseFloat(gpa),\r\n                majors,\r\n                standings,\r\n                skills,\r\n                interests,\r\n                courses\r\n            })\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setUserData(data);\r\n    }\r\n\r\n    async function logoutUser(){\r\n        const fire = auth.signOut();\r\n        setUserData(null);\r\n        return fire;\r\n    }\r\n\r\n    async function deleteUser(){\r\n        const data = await fetch(userData.links.self, {\r\n            method: 'DELETE'\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        const fire = currentUser.delete();\r\n        return fire;\r\n    }\r\n\r\n    async function joinCluster(){\r\n        const data = await fetch(userData.links.self, {\r\n            method: 'POST',\r\n            body: JSON.stringify({action: 'join'})\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setUserData(data);\r\n    }\r\n\r\n    async function leaveCluster(){\r\n        const data = await fetch(userData.links.self, {\r\n            method: 'POST',\r\n            body: JSON.stringify({action: 'leave'})\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setUserData(data);\r\n    }\r\n\r\n    async function peelFromCluster(){\r\n        const data = await fetch(userData.links.self, {\r\n            method: 'POST',\r\n            body: JSON.stringify({action: 'peel'})\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        setUserData(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(async user => {\r\n            if(!user){\r\n                sessionStorage.clear();\r\n            } else {\r\n                const data = await fetch(`/users?email=${user.email}`).then(response => {\r\n                    if(response.ok){\r\n                        return response.json();\r\n                    }\r\n                });\r\n                setUserData(data);\r\n                sessionStorage.setItem('currentUser', JSON.stringify(user));\r\n            }\r\n            setCurrentUser(user);\r\n        })\r\n        setLoading(false)\r\n        return unsubscribe;\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        !currentUser ? sessionStorage.clear() :\r\n            sessionStorage.setItem('userData', JSON.stringify(userData));\r\n        setLoading(false)\r\n    }, [userData]);\r\n\r\n    const value = {\r\n        currentUser,\r\n        userData,\r\n        registerUser,\r\n        loginUser,\r\n        logoutUser,\r\n        deleteUser,\r\n        updateAccount,\r\n        updateFeatures,\r\n        joinCluster,\r\n        peelFromCluster,\r\n        leaveCluster,\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}