{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sj/Documents/Programming/clusters/reactapp/src/components/forms/RegistrationForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport TagsInput from 'react-tagsinput';\nimport { useAuth } from '../../contexts/AuthContext';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport 'react-bootstrap';\nexport function RegistrationForm() {\n  _s();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [type, setType] = useState('');\n  const [major, setMajor] = useState([]);\n  const [standing, setStanding] = useState([]);\n  const [gpa, setGpa] = useState(0);\n  const [skills, setSkills] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const {\n    registerUser\n  } = useAuth();\n  const history = useHistory();\n\n  async function handleRegisterUser() {\n    try {\n      setError('Registered');\n      setLoading(true);\n\n      if (!name || !email || !password || !confirmPassword || !type || !major.length || !standing.length || !gpa || !skills.length) {\n        throw 'Fields not filled out';\n      } else if (password !== confirmPassword) {\n        throw 'Passwords do not match';\n      }\n\n      await registerUser(name, email, password, type, major, standing, gpa, skills);\n      history.push('/dormant-dashboard');\n    } catch (err) {\n      setError(err);\n    }\n\n    console.log(error);\n    setLoading(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: /*#__PURE__*/_jsxDEV(Form.Row, {\n      className: \"align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: \"auto\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          htmlFor: \"inlineFormInput\",\n          srOnly: true,\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          className: \"mb-2\",\n          id: \"inlineFormInput\",\n          placeholder: \"Jane Doe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: \"auto\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          htmlFor: \"inlineFormInputGroup\",\n          srOnly: true,\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          className: \"mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(InputGroup.Prepend, {\n            children: /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n              children: \"@\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            id: \"inlineFormInputGroup\",\n            placeholder: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          id: \"autoSizingCheck\",\n          className: \"mb-2\",\n          label: \"Remember me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: \"mb-2\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 1\n  }, this) //     <div>\n  //         Type:\n  //         <input type='radio' name='type' onClick={() => setType('applicant')}/> Applicant\n  //         <input type='radio' name='type' onClick={() => setType('business')}/> Business\n  //         <br/>\n  //         Name: <input value={name} onChange={e => setName(e.target.value)}/>\n  //         <br/>\n  //         Email: <input value={email} onChange={e => setEmail(e.target.value)}/>\n  //         <br/>\n  //         Password: <input type='password' value={password} onChange={e => setPassword(e.target.value)}/>\n  //         <br/>\n  //         Confirm Password: <input type='password' value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)}/>\n  //         <br/>\n  //         Major: <TagsInput value={major} onChange={tags => setMajor(tags)}/>\n  //         <br/>\n  //         Standing: <TagsInput value={standing} onChange={tags => setStanding(tags)}/>\n  //         <br/>\n  //         GPA: <input value={gpa} onChange={e => setGpa(e.target.value)}/>\n  //         <br/>\n  //         Skills: <TagsInput value={skills} onChange={tags => setSkills(tags)}/>\n  //         <button disabled={loading} onClick={handleRegisterUser}>Submit</button>\n  //         <div>\n  //             Already Have an Account? <Link to='/login'>Log In</Link>\n  //         </div>\n  //     </div>\n  ;\n}\n\n_s(RegistrationForm, \"t3h8RM0s0yPS1y9Q9/LB16OocZk=\", false, function () {\n  return [useAuth, useHistory];\n});\n\n_c = RegistrationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"sources":["/Users/sj/Documents/Programming/clusters/reactapp/src/components/forms/RegistrationForm.js"],"names":["React","useState","useEffect","Link","useHistory","TagsInput","useAuth","Form","Button","Col","RegistrationForm","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","type","setType","major","setMajor","standing","setStanding","gpa","setGpa","skills","setSkills","error","setError","loading","setLoading","registerUser","history","handleRegisterUser","length","push","err","console","log"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport TagsInput from 'react-tagsinput';\nimport {useAuth} from '../../contexts/AuthContext';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport 'react-bootstrap';\n\n\nexport function RegistrationForm() {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [type, setType] = useState('')\n    const [major, setMajor] = useState([]);\n    const [standing, setStanding] = useState([]);\n    const [gpa, setGpa] = useState(0);\n    const [skills, setSkills] = useState([]);\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const {registerUser} = useAuth();\n    const history = useHistory();\n\n\n    async function handleRegisterUser() {\n        try {\n            setError('Registered');\n            setLoading(true);\n            if(!name || !email || !password || !confirmPassword || !type || !major.length\n               || !standing.length || !gpa || !skills.length) {\n               throw 'Fields not filled out';\n            } else if(password !== confirmPassword){\n                throw 'Passwords do not match';\n            }\n            await registerUser(name, email, password, type, major, standing, gpa, skills);\n            history.push('/dormant-dashboard');\n        } catch(err) {\n            setError(err);\n        }\n        console.log(error);\n        setLoading(false);\n    }\n\n    return (\n<Form>\n  <Form.Row className=\"align-items-center\">\n    <Col xs=\"auto\">\n      <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n        Name\n      </Form.Label>\n      <Form.Control\n        className=\"mb-2\"\n        id=\"inlineFormInput\"\n        placeholder=\"Jane Doe\"\n      />\n    </Col>\n    <Col xs=\"auto\">\n      <Form.Label htmlFor=\"inlineFormInputGroup\" srOnly>\n        Username\n      </Form.Label>\n      <InputGroup className=\"mb-2\">\n        <InputGroup.Prepend>\n          <InputGroup.Text>@</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl id=\"inlineFormInputGroup\" placeholder=\"Username\" />\n      </InputGroup>\n    </Col>\n    <Col xs=\"auto\">\n      <Form.Check\n        type=\"checkbox\"\n        id=\"autoSizingCheck\"\n        className=\"mb-2\"\n        label=\"Remember me\"\n      />\n    </Col>\n    <Col xs=\"auto\">\n      <Button type=\"submit\" className=\"mb-2\">\n        Submit\n      </Button>\n    </Col>\n  </Form.Row>\n</Form>\n\n    //     <div>\n    //         Type:\n    //         <input type='radio' name='type' onClick={() => setType('applicant')}/> Applicant\n    //         <input type='radio' name='type' onClick={() => setType('business')}/> Business\n    //         <br/>\n    //         Name: <input value={name} onChange={e => setName(e.target.value)}/>\n    //         <br/>\n    //         Email: <input value={email} onChange={e => setEmail(e.target.value)}/>\n    //         <br/>\n    //         Password: <input type='password' value={password} onChange={e => setPassword(e.target.value)}/>\n    //         <br/>\n    //         Confirm Password: <input type='password' value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)}/>\n    //         <br/>\n    //         Major: <TagsInput value={major} onChange={tags => setMajor(tags)}/>\n    //         <br/>\n    //         Standing: <TagsInput value={standing} onChange={tags => setStanding(tags)}/>\n    //         <br/>\n    //         GPA: <input value={gpa} onChange={e => setGpa(e.target.value)}/>\n    //         <br/>\n    //         Skills: <TagsInput value={skills} onChange={tags => setSkills(tags)}/>\n    //         <button disabled={loading} onClick={handleRegisterUser}>Submit</button>\n    //         <div>\n    //             Already Have an Account? <Link to='/login'>Log In</Link>\n    //         </div>\n    //     </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}