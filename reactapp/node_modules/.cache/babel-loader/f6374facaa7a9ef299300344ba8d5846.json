{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aarun\\\\PycharmProjects\\\\clusters\\\\reactapp\\\\src\\\\contexts\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport bcrypt from 'bcryptjs';\nconst AuthContext = /*#__PURE__*/React.createContext();\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  async function registerApplicant(name, email, password, major, standing, gpa, skills) {\n    const temp = await fetch(`/applicants?email=${email}`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n    console.log(temp);\n\n    if (temp.length) {\n      throw 'This email has already been taken';\n    }\n\n    fetch('/applicants', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        email,\n        password: bcrypt.hashSync(password, 10),\n        features: {\n          major,\n          standing,\n          gpa: parseFloat(gpa),\n          skills\n        }\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => {\n      console.log(data);\n      setCurrentUser(data);\n      setLoading(false);\n    });\n  }\n\n  async function logInApplicant(email, password) {\n    const temp = await fetch(`/applicants?email=${email}`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n\n    if (!temp.length) {\n      throw 'No email associated with account';\n    } else if (!(await bcrypt.compare(password, temp[0].password))) {\n      throw 'Invalid password';\n    }\n\n    setCurrentUser(temp[0]);\n    setLoading(false);\n  }\n\n  async function registerBusiness(name, email, password, major, standing, gpa, skills) {\n    const temp = await fetch(`/businesses?email=${email}`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n\n    if (temp.length) {\n      throw 'This email has already been taken';\n    }\n\n    fetch('/businesses', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        email,\n        password: bcrypt.hashSync(password, 10),\n        features: {\n          major,\n          standing,\n          gpa: parseFloat(gpa),\n          skills\n        }\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => {\n      setCurrentUser(data);\n      setLoading(false);\n    });\n  }\n\n  async function logInBusiness(email, password) {\n    const temp = await fetch(`/businesses?email=${email}`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n\n    if (!temp.length) {\n      throw 'No email associated with account';\n    } else if (!(await bcrypt.compare(password, temp[0].password))) {\n      throw 'Invalid password';\n    } else {\n      setCurrentUser(temp[0]);\n      setLoading(false);\n    }\n  }\n\n  async function updateApplicant(name, email, password, major, standing, gpa, skills) {\n    if (email !== currentUser.email) {\n      const temp = await fetch(`/applicants?email=${email}`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      });\n      console.log(temp);\n\n      if (temp.length) {\n        throw 'This email has been taken';\n      }\n    }\n\n    fetch(currentUser.links.self, {\n      method: 'PUT',\n      body: JSON.stringify({\n        name,\n        email,\n        password: password ? bcrypt.hashSync(password, 10) : currentUser.password,\n        features: {\n          major,\n          standing,\n          gpa: parseFloat(gpa),\n          skills\n        }\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => {\n      setCurrentUser(data);\n      setLoading(false);\n    });\n  }\n\n  async function updateBusiness(name, email, password, major, standing, gpa, skills) {\n    if (email !== currentUser.email) {\n      const temp = await fetch(`/businesses?email=${email}`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      });\n\n      if (temp.length) {\n        throw 'This email has been taken';\n      }\n    }\n\n    fetch(currentUser.links.self, {\n      method: 'PUT',\n      body: JSON.stringify({\n        name,\n        email,\n        password: password ? bcrypt.hashSync(password, 10) : currentUser.password,\n        features: {\n          major,\n          standing,\n          gpa: parseFloat(gpa),\n          skills\n        }\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => {\n      setCurrentUser(data);\n      setLoading(false);\n    });\n  }\n\n  async function logOut() {\n    setCurrentUser(null);\n  }\n\n  async function deleteUser() {\n    if (!currentUser) {\n      throw 'No user to be deleted';\n    }\n\n    fetch(currentUser.links.self, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => {\n      setCurrentUser(null);\n      setLoading(false);\n    });\n  }\n\n  async function joinCluster() {\n    if (!currentUser) {\n      throw 'No user to be joined';\n    } else if (currentUser.clusterId) {\n      throw 'Already in a cluster';\n    }\n\n    fetch(currentUser.links.self, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'join'\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => {\n      setCurrentUser(data);\n      setLoading(false);\n    });\n  }\n\n  async function leaveCluster() {\n    if (!currentUser) {\n      throw 'No user to be joined';\n    } else if (!currentUser.clusterId) {\n      throw 'Already outside cluster';\n    }\n\n    fetch(currentUser.links.self, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'leave'\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => {\n      setCurrentUser(data);\n      setLoading(false);\n    });\n  }\n\n  async function peelFromCluster() {\n    if (!currentUser) {\n      throw 'No user to be joined';\n    } else if (!currentUser.clusterId) {\n      throw 'Cannot peel from outside cluster';\n    }\n\n    fetch(currentUser.links.self, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'peel'\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => {\n      setCurrentUser(data);\n      setLoading(false);\n    });\n  }\n\n  useEffect(() => {\n    setLoading(false);\n  }, [currentUser]);\n  const value = {\n    currentUser,\n    registerApplicant,\n    registerBusiness,\n    logInApplicant,\n    logInBusiness,\n    updateApplicant,\n    updateBusiness,\n    logOut,\n    deleteUser,\n    joinCluster,\n    leaveCluster,\n    peelFromCluster\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AuthProvider, \"1cdeWWSmbSz3cOWqWLAt+Ta4DMY=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/aarun/PycharmProjects/clusters/reactapp/src/contexts/AuthContext.js"],"names":["React","useContext","useState","useEffect","bcrypt","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loading","setLoading","registerApplicant","name","email","password","major","standing","gpa","skills","temp","fetch","then","response","ok","json","console","log","length","method","body","JSON","stringify","hashSync","features","parseFloat","data","logInApplicant","compare","registerBusiness","logInBusiness","updateApplicant","links","self","updateBusiness","logOut","deleteUser","joinCluster","clusterId","action","leaveCluster","peelFromCluster","value"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect} from 'react';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({children}) {\r\n\r\n    const [currentUser, setCurrentUser] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    async function registerApplicant(name, email, password, major, standing, gpa, skills) {\r\n        const temp = await fetch(`/applicants?email=${email}`).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        console.log(temp);\r\n        if(temp.length){\r\n            throw 'This email has already been taken';\r\n        }\r\n        fetch('/applicants', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                name,\r\n                email,\r\n                password: bcrypt.hashSync(password, 10),\r\n                features: {\r\n                    major,\r\n                    standing,\r\n                    gpa: parseFloat(gpa),\r\n                    skills\r\n                }\r\n            })\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        }).then(data => {\r\n            console.log(data)\r\n            setCurrentUser(data);\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    async function logInApplicant(email, password){\r\n        const temp = await fetch(`/applicants?email=${email}`).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        if(!temp.length){\r\n            throw 'No email associated with account';\r\n        } else if(!(await bcrypt.compare(password, temp[0].password))){\r\n            throw 'Invalid password';\r\n        }\r\n        setCurrentUser(temp[0]);\r\n        setLoading(false);\r\n    }\r\n\r\n    async function registerBusiness(name, email, password, major, standing, gpa, skills){\r\n        const temp = await fetch(`/businesses?email=${email}`).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        if(temp.length){\r\n            throw 'This email has already been taken';\r\n        }\r\n        fetch('/businesses', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                name,\r\n                email,\r\n                password: bcrypt.hashSync(password, 10),\r\n                features: {\r\n                    major,\r\n                    standing,\r\n                    gpa: parseFloat(gpa),\r\n                    skills\r\n                }\r\n            })\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        }).then(data => {\r\n            setCurrentUser(data);\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    async function logInBusiness(email, password){\r\n        const temp = await fetch(`/businesses?email=${email}`).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        });\r\n        if(!temp.length){\r\n            throw 'No email associated with account';\r\n        } else if(!(await bcrypt.compare(password, temp[0].password))){\r\n            throw 'Invalid password';\r\n        } else {\r\n            setCurrentUser(temp[0]);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    async function updateApplicant(name, email, password, major, standing, gpa, skills){\r\n        if(email !== currentUser.email){\r\n            const temp = await fetch(`/applicants?email=${email}`).then(response => {\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            });\r\n            console.log(temp);\r\n            if(temp.length){\r\n                throw 'This email has been taken';\r\n            }\r\n        }\r\n        fetch(currentUser.links.self, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                name,\r\n                email,\r\n                password: password ? bcrypt.hashSync(password, 10) : currentUser.password,\r\n                features: {\r\n                    major,\r\n                    standing,\r\n                    gpa: parseFloat(gpa),\r\n                    skills\r\n                }\r\n            })\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        }).then(data => {\r\n            setCurrentUser(data);\r\n            setLoading(false);\r\n        });\r\n\r\n    }\r\n\r\n    async function updateBusiness(name, email, password, major, standing, gpa, skills){\r\n        if(email !== currentUser.email){\r\n            const temp = await fetch(`/businesses?email=${email}`).then(response => {\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            });\r\n            if(temp.length){\r\n                throw 'This email has been taken';\r\n            }\r\n        }\r\n        fetch(currentUser.links.self, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                name,\r\n                email,\r\n                password: password ? bcrypt.hashSync(password, 10) : currentUser.password,\r\n                features: {\r\n                    major,\r\n                    standing,\r\n                    gpa: parseFloat(gpa),\r\n                    skills\r\n                }\r\n            })\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        }).then(data => {\r\n            setCurrentUser(data);\r\n            setLoading(false);\r\n        });\r\n\r\n    }\r\n\r\n    async function logOut(){\r\n        setCurrentUser(null);\r\n    }\r\n\r\n    async function deleteUser(){\r\n        if(!currentUser){\r\n            throw 'No user to be deleted'\r\n        }\r\n        fetch(currentUser.links.self, {\r\n            method: 'DELETE'\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        }).then(data => {\r\n            setCurrentUser(null);\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    async function joinCluster(){\r\n        if(!currentUser){\r\n            throw 'No user to be joined';\r\n        } else if(currentUser.clusterId){\r\n            throw 'Already in a cluster';\r\n        }\r\n        fetch(currentUser.links.self, {\r\n            method: 'POST',\r\n            body: JSON.stringify({action: 'join'})\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        }).then(data => {\r\n            setCurrentUser(data);\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    async function leaveCluster(){\r\n        if(!currentUser){\r\n            throw 'No user to be joined';\r\n        } else if(!currentUser.clusterId){\r\n            throw 'Already outside cluster';\r\n        }\r\n        fetch(currentUser.links.self, {\r\n            method: 'POST',\r\n            body: JSON.stringify({action: 'leave'})\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        }).then(data => {\r\n            setCurrentUser(data);\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    async function peelFromCluster(){\r\n        if(!currentUser){\r\n            throw 'No user to be joined';\r\n        } else if(!currentUser.clusterId){\r\n            throw 'Cannot peel from outside cluster';\r\n        }\r\n        fetch(currentUser.links.self, {\r\n            method: 'POST',\r\n            body: JSON.stringify({action: 'peel'})\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        }).then(data => {\r\n            setCurrentUser(data);\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(false)\r\n    }, [currentUser]);\r\n\r\n    const value = {\r\n        currentUser,\r\n        registerApplicant,\r\n        registerBusiness,\r\n        logInApplicant,\r\n        logInBusiness,\r\n        updateApplicant,\r\n        updateBusiness,\r\n        logOut,\r\n        deleteUser,\r\n        joinCluster,\r\n        leaveCluster,\r\n        peelFromCluster\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}