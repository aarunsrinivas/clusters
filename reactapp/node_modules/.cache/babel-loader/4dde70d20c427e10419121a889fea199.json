{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aarun\\\\PycharmProjects\\\\clusters\\\\reactapp\\\\src\\\\components\\\\forms\\\\ApplicantRegistration.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport bcrypt from 'bcryptjs';\nimport TagsInput from 'react-tagsinput';\nexport function ApplicantRegistration() {\n  _s();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [major, setMajor] = useState([]);\n  const [standing, setStanding] = useState([]);\n  const [gpa, setGpa] = useState(0);\n  const [skills, setSkills] = useState([]);\n\n  const handleClick = async () => {\n    const temp = fetch(`/applicants?email=${email}`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => data);\n\n    if (temp.length > 0) {\n      console.log('This email is taken');\n      return;\n    } else {\n      fetch('/applicants', {\n        method: 'POST',\n        body: JSON.stringify({\n          name,\n          email,\n          password: bcrypt.hashSync(password, 10),\n          features: {\n            major,\n            standing,\n            gpa: parseFloat(gpa),\n            skills\n          }\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      }).then(data => console.log(data));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), \"Email: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      value: email,\n      onChange: e => setEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), \"Password: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), \"Major: \", /*#__PURE__*/_jsxDEV(TagsInput, {\n      value: major,\n      onChange: tags => setMajor(tags)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), \"Standing: \", /*#__PURE__*/_jsxDEV(TagsInput, {\n      value: standing,\n      onChange: tags => setStanding(tags)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), \"GPA: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      value: gpa,\n      onChange: e => setGpa(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), \"Skills: \", /*#__PURE__*/_jsxDEV(TagsInput, {\n      value: skills,\n      onChange: tags => setSkills(tags)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleClick(),\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ApplicantRegistration, \"kNLdaJ8W0W3iRSSMp/slaP0/2fQ=\");\n\n_c = ApplicantRegistration;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApplicantRegistration\");","map":{"version":3,"sources":["C:/Users/aarun/PycharmProjects/clusters/reactapp/src/components/forms/ApplicantRegistration.js"],"names":["React","useState","useEffect","bcrypt","TagsInput","ApplicantRegistration","name","setName","email","setEmail","password","setPassword","major","setMajor","standing","setStanding","gpa","setGpa","skills","setSkills","handleClick","temp","fetch","then","response","ok","json","data","length","console","log","method","body","JSON","stringify","hashSync","features","parseFloat","e","target","value","tags"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport bcrypt from 'bcryptjs';\r\nimport TagsInput from 'react-tagsinput';\r\n\r\nexport function ApplicantRegistration() {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [major, setMajor] = useState([]);\r\n    const [standing, setStanding] = useState([]);\r\n    const [gpa, setGpa] = useState(0);\r\n    const [skills, setSkills] = useState([]);\r\n\r\n    const handleClick = async () => {\r\n        const temp = fetch(`/applicants?email=${email}`).then(response => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        }).then(data => data);\r\n\r\n        if(temp.length > 0){\r\n            console.log('This email is taken');\r\n            return;\r\n        } else {\r\n            fetch('/applicants', {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    name,\r\n                    email,\r\n                    password: bcrypt.hashSync(password, 10),\r\n                    features: {\r\n                        major,\r\n                        standing,\r\n                        gpa: parseFloat(gpa),\r\n                        skills\r\n                    }\r\n                })\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            }).then(data => console.log(data));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            Name: <input value={name} onChange={e => setName(e.target.value)}/>\r\n            <br/>\r\n            Email: <input value={email} onChange={e => setEmail(e.target.value)}/>\r\n            <br/>\r\n            Password: <input type='password' value={password} onChange={e => setPassword(e.target.value)}/>\r\n            <br/>\r\n            Major: <TagsInput value={major} onChange={tags => setMajor(tags)}/>\r\n            <br/>\r\n            Standing: <TagsInput value={standing} onChange={tags => setStanding(tags)}/>\r\n            <br/>\r\n            GPA: <input value={gpa} onChange={e => setGpa(e.target.value)}/>\r\n            <br/>\r\n            Skills: <TagsInput value={skills} onChange={tags => setSkills(tags)}/>\r\n            <button onClick={() => handleClick()}>Submit</button>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}