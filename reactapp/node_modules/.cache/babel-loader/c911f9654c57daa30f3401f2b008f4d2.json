{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aarun\\\\PycharmProjects\\\\clusters\\\\reactapp\\\\src\\\\contexts\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport bcrypt from 'bcryptjs';\nconst AuthContext = /*#__PURE__*/React.createContext();\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  async function registerApplicant(name, email, password, confirmPassword, major, standing, gpa, skills) {\n    if (!name || !email || !password || !confirmPassword || !major.length || !standing.length || !gpa || !skills.length) {\n      throw 'Fields not filled out';\n    } else if (password !== confirmPassword) {\n      throw 'Passwords do not match';\n    } else {\n      const temp = await fetch(`/applicants?email=${email}`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      });\n\n      if (temp.length > 0) {\n        throw 'This email has already been taken';\n      } else {\n        return fetch('/applicants', {\n          method: 'POST',\n          body: JSON.stringify({\n            name,\n            email,\n            password: bcrypt.hashSync(password, 10),\n            features: {\n              major,\n              standing,\n              gpa: parseFloat(gpa),\n              skills\n            }\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n        }).then(data => {\n          setCurrentUser(data);\n          setLoading(false);\n        });\n      }\n    }\n  }\n\n  async function logInApplicant(email, password) {\n    if (!email || !password) {\n      throw 'Fields are required';\n    } else {\n      const temp = await fetch(`/applicants?email=${email}`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      });\n\n      if (!temp.length) {\n        throw 'No email associated with account';\n      } else if (!(await bcrypt.compare(password, temp[0].password))) {\n        throw 'Invalid password';\n      } else {\n        setCurrentUser(temp[0]);\n        setLoading(false);\n      }\n    }\n  }\n\n  async function registerBusiness(name, email, password, confirmPassword, major, standing, gpa, skills) {\n    if (!name || !email || !password || !confirmPassword || !major.length || !standing.length || !gpa || !skills.length) {\n      throw 'Fields not filled out';\n    } else if (password !== confirmPassword) {\n      throw 'Passwords do not match';\n    } else {\n      const temp = await fetch(`/businesses?email=${email}`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      });\n\n      if (temp.length > 0) {\n        throw 'This email has already been taken';\n      } else {\n        return fetch('/businesses', {\n          method: 'POST',\n          body: JSON.stringify({\n            name,\n            email,\n            password: bcrypt.hashSync(password, 10),\n            features: {\n              major,\n              standing,\n              gpa: parseFloat(gpa),\n              skills\n            }\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n        }).then(data => {\n          setCurrentUser(data);\n          setLoading(false);\n        });\n      }\n    }\n  }\n\n  async function logInBusiness(email, password) {\n    if (!email || !password) {\n      throw 'Fields are required';\n    } else {\n      const temp = await fetch(`/businesses?email=${email}`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      });\n\n      if (!temp.length) {\n        throw 'No email associated with account';\n      } else if (!(await bcrypt.compare(password, temp[0].password))) {\n        throw 'Invalid password';\n      } else {\n        setCurrentUser(temp[0]);\n        setLoading(false);\n      }\n    }\n  }\n\n  async function updateApplicant() {}\n\n  async function logOut() {\n    setCurrentUser(null);\n  }\n\n  useEffect(() => {\n    setLoading(false);\n  }, [currentUser]);\n  const value = {\n    currentUser,\n    registerApplicant,\n    registerBusiness,\n    logInApplicant,\n    logInBusiness,\n    logOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AuthProvider, \"1cdeWWSmbSz3cOWqWLAt+Ta4DMY=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/aarun/PycharmProjects/clusters/reactapp/src/contexts/AuthContext.js"],"names":["React","useContext","useState","useEffect","bcrypt","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loading","setLoading","registerApplicant","name","email","password","confirmPassword","major","standing","gpa","skills","length","temp","fetch","then","response","ok","json","method","body","JSON","stringify","hashSync","features","parseFloat","data","logInApplicant","compare","registerBusiness","logInBusiness","updateApplicant","logOut","value"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect} from 'react';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({children}){\r\n\r\n    const [currentUser, setCurrentUser] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    async function registerApplicant(name, email, password, confirmPassword, major, standing, gpa, skills) {\r\n        if(!name || !email || !password || !confirmPassword || !major.length\r\n            || !standing.length || !gpa || !skills.length) {\r\n            throw 'Fields not filled out';\r\n        } else if(password !== confirmPassword){\r\n            throw 'Passwords do not match';\r\n        } else {\r\n            const temp = await fetch(`/applicants?email=${email}`).then(response => {\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n             });\r\n             if(temp.length > 0){\r\n                throw 'This email has already been taken';\r\n             } else {\r\n                return fetch('/applicants', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        name,\r\n                        email,\r\n                        password: bcrypt.hashSync(password, 10),\r\n                        features: {\r\n                            major,\r\n                            standing,\r\n                            gpa: parseFloat(gpa),\r\n                            skills\r\n                        }\r\n                    })\r\n                }).then(response => {\r\n                    if(response.ok){\r\n                        return response.json();\r\n                    }\r\n                }).then(data => {\r\n                    setCurrentUser(data);\r\n                    setLoading(false);\r\n                });\r\n             }\r\n        }\r\n    }\r\n\r\n    async function logInApplicant(email, password) {\r\n        if(!email || !password){\r\n            throw 'Fields are required';\r\n        } else {\r\n            const temp = await fetch(`/applicants?email=${email}`).then(response => {\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            });\r\n            if(!temp.length){\r\n                throw 'No email associated with account';\r\n            } else if(!(await bcrypt.compare(password, temp[0].password))){\r\n                throw 'Invalid password';\r\n            } else {\r\n                setCurrentUser(temp[0]);\r\n                setLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function registerBusiness(name, email, password, confirmPassword, major, standing, gpa, skills) {\r\n        if(!name || !email || !password || !confirmPassword || !major.length\r\n            || !standing.length || !gpa || !skills.length) {\r\n            throw 'Fields not filled out';\r\n        } else if(password !== confirmPassword){\r\n            throw 'Passwords do not match';\r\n        } else {\r\n            const temp = await fetch(`/businesses?email=${email}`).then(response => {\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n             });\r\n             if(temp.length > 0){\r\n                throw 'This email has already been taken';\r\n             } else {\r\n                return fetch('/businesses', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        name,\r\n                        email,\r\n                        password: bcrypt.hashSync(password, 10),\r\n                        features: {\r\n                            major,\r\n                            standing,\r\n                            gpa: parseFloat(gpa),\r\n                            skills\r\n                        }\r\n                    })\r\n                }).then(response => {\r\n                    if(response.ok){\r\n                        return response.json();\r\n                    }\r\n                }).then(data => {\r\n                    setCurrentUser(data);\r\n                    setLoading(false);\r\n                });\r\n             }\r\n        }\r\n    }\r\n\r\n    async function logInBusiness(email, password) {\r\n        if(!email || !password){\r\n            throw 'Fields are required';\r\n        } else {\r\n            const temp = await fetch(`/businesses?email=${email}`).then(response => {\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            });\r\n            if(!temp.length){\r\n                throw 'No email associated with account';\r\n            } else if(!(await bcrypt.compare(password, temp[0].password))){\r\n                throw 'Invalid password';\r\n            } else {\r\n                setCurrentUser(temp[0]);\r\n                setLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function updateApplicant(){\r\n\r\n    }\r\n\r\n    async function logOut(){\r\n        setCurrentUser(null);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(false)\r\n    }, [currentUser]);\r\n\r\n    const value = {\r\n        currentUser,\r\n        registerApplicant,\r\n        registerBusiness,\r\n        logInApplicant,\r\n        logInBusiness,\r\n        logOut\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}