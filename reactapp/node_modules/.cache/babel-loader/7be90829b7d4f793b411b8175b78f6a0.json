{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aarun\\\\PycharmProjects\\\\clusters\\\\reactapp\\\\src\\\\contexts\\\\AC.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport bcrypt from 'bcryptjs';\nimport { auth } from '../firebase';\nconst AuthContext = /*#__PURE__*/React.createContext();\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  const signUp = async data => {\n    const {\n      name,\n      email,\n      password,\n      confirmPassword,\n      major,\n      standing,\n      gpa,\n      skills\n    } = data;\n\n    if (password !== confirmPassword) {\n      throw 'Passwords do not match';\n    } else {\n      const temp = await fetch(`/applicants?email=${email}`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      });\n\n      if (temp.length > 0) {\n        throw 'This email has already been taken';\n      } else {\n        fetch('/applicants', {\n          method: 'POST',\n          body: JSON.stringify({\n            name,\n            email,\n            password: bcrypt.hashSync(password, 10),\n            features: {\n              major,\n              standing,\n              gpa: parseFloat(gpa),\n              skills\n            }\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n        }).then(data => setCurrentUser(data));\n      }\n\n      setLoading(false);\n    }\n  };\n\n  const logIn = (email, password) => {\n    return auth.signInWithEmailAndPassword(email, password);\n  };\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    signUp,\n    logIn\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AuthProvider, \"1cdeWWSmbSz3cOWqWLAt+Ta4DMY=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/aarun/PycharmProjects/clusters/reactapp/src/contexts/AC.js"],"names":["React","useContext","useState","useEffect","bcrypt","auth","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loading","setLoading","signUp","data","name","email","password","confirmPassword","major","standing","gpa","skills","temp","fetch","then","response","ok","json","length","method","body","JSON","stringify","hashSync","features","parseFloat","logIn","signInWithEmailAndPassword","unsubscribe","onAuthStateChanged","user","value"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect} from 'react';\r\nimport bcrypt from 'bcryptjs';\r\nimport {auth} from '../firebase';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({children}){\r\n\r\n    const [currentUser, setCurrentUser] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const signUp = async data => {\r\n        const {name, email, password, confirmPassword, major, standing, gpa, skills} = data;\r\n        if(password !== confirmPassword){\r\n            throw 'Passwords do not match';\r\n        } else {\r\n            const temp = await fetch(`/applicants?email=${email}`).then(response => {\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n             });\r\n             if(temp.length > 0){\r\n                throw 'This email has already been taken';\r\n             } else {\r\n                fetch('/applicants', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        name,\r\n                        email,\r\n                        password: bcrypt.hashSync(password, 10),\r\n                        features: {\r\n                            major,\r\n                            standing,\r\n                            gpa: parseFloat(gpa),\r\n                            skills\r\n                        }\r\n                    })\r\n                }).then(response => {\r\n                    if(response.ok){\r\n                        return response.json();\r\n                    }\r\n                }).then(data => setCurrentUser(data));\r\n             }\r\n             setLoading(false);\r\n        }\r\n    };\r\n\r\n    const logIn = (email, password) => {\r\n        return auth.signInWithEmailAndPassword(email, password);\r\n    };\r\n\r\n    useEffect(() => {\r\n       const unsubscribe = auth.onAuthStateChanged(user => {\r\n            setCurrentUser(user);\r\n            setLoading(false);\r\n       });\r\n       return unsubscribe;\r\n    }, []);\r\n\r\n    const value = {\r\n        currentUser,\r\n        signUp,\r\n        logIn\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}